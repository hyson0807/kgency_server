{"mappings":"A,O,a,C,C,Y,C,K,U,A,Q,M,iB,A,Q,M,I,A,Q,e,C,C,c,C,K,a,C,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,CGGO,MAAM,EASX,YAAY,CAA6B,CAAE,CACzC,IAAI,CAAC,IAAI,CAAG,EAAU,IAAI,CAC1B,IAAI,CAAC,UAAU,CAAG,EAAU,UAAU,CACtC,IAAI,CAAC,SAAS,CAAG,EAAU,SAAS,CACpC,IAAI,CAAC,UAAU,CAAG,EAAU,UAAU,CACtC,IAAI,CAAC,MAAM,CAAG,EAAU,MAAM,CAC9B,IAAI,CAAC,OAAO,CAAG,EAAU,OAAO,CAChC,IAAI,CAAC,OAAO,CAAG,EAAU,OAAO,AAClC,CACF,CCgDO,MAAM,EAWX,YAAY,CAA2B,CAAE,CACvC,IAAI,CAAC,OAAO,CAAG,EAAU,OAAO,CAChC,IAAI,CAAC,UAAU,CAAG,EAAU,UAAU,CACtC,IAAI,CAAC,WAAW,CAAG,EAAU,WAAW,CACxC,IAAI,CAAC,OAAO,CAAG,EAAU,OAAO,CAChC,IAAI,CAAC,cAAc,CAAG,EAAU,cAAc,CAC9C,IAAI,CAAC,SAAS,CAAG,EAAU,SAAS,CACpC,IAAI,CAAC,UAAU,CAAG,EAAU,UAAU,CACtC,IAAI,CAAC,cAAc,CAAG,EAAU,cAAc,CAC9C,IAAI,CAAC,OAAO,CAAG,EAAU,OAAO,AAClC,CACF,CFjDO,MAAM,EA2FX,YAAY,CAA2B,CAAE,CACvC,IAAI,CAAC,EAAE,CAAG,EAAU,EAAE,CACtB,IAAI,CAAC,IAAI,CAAG,EAAU,IAAI,CAC1B,IAAI,CAAC,IAAI,CAAG,EAAU,IAAI,CAC1B,IAAI,CAAC,OAAO,CAAG,EAAU,OAAO,CAChC,IAAI,CAAC,IAAI,CAAG,EAAU,IAAI,CAC1B,IAAI,CAAC,OAAO,CAAG,EAAU,OAAO,CAChC,IAAI,CAAC,cAAc,CAAG,EAAU,cAAc,CAC9C,IAAI,CAAC,OAAO,CAAG,EAAU,OAAO,CACF,KAAA,GAA1B,EAAU,YAAY,EACxB,CAAA,IAAI,CAAC,YAAY,CAAG,IAAI,EAAY,EAAU,YAAY,CAAA,EAEhC,KAAA,GAAxB,EAAU,UAAU,EACtB,CAAA,IAAI,CAAC,UAAU,CAAG,IAAI,EAAU,EAAU,UAAU,CAAA,EAEtD,IAAI,CAAC,YAAY,CAAG,EAAU,YAAY,CAC1C,IAAI,CAAC,YAAY,CAAG,EAAU,YAAY,CAC1C,IAAI,CAAC,UAAU,CAAG,EAAU,UAAU,AACxC,CACF,C,IOpJK,E,E,C,E,E,E,mB,I,G,E,E,c,I,G,E,E,e,I,G,E,E,0B,I,G,E,E,kB,I,EFGE,OAAM,UAAyB,MACpC,YAAY,CAAe,CAAE,CAC3B,KAAK,CAAC,GACN,IAAI,CAAC,IAAI,CAAG,kBACd,CACF,CAEO,MAAM,UAAoB,MAC/B,YAAY,CAAe,CAAE,CAC3B,KAAK,CAAC,GACN,IAAI,CAAC,IAAI,CAAG,oBACd,CACF,CAEO,MAAM,UAAqB,MAChC,YAAY,CAAiB,CAAE,CAAoB,CAAE,CACnD,KAAK,CAAC,GACN,IAAI,CAAC,IAAI,CAAG,CACd,CACF,CAKO,MAAM,UAAgC,MAG3C,YAAY,CAA+B,CAAE,CAE3C,KAAK,CACH,CAAA,EAFyB,EAAU,MAAM,CAEnB,8TAAkE,CAAC,EAE3F,IAAI,CAAC,IAAI,CAAG,2BACZ,IAAI,CAAC,iBAAiB,CAAG,CAC3B,CACF,CAEO,MAAM,UAAwB,MACnC,YAAY,CAAe,CAAE,CAC3B,KAAK,CAAC,GACN,IAAI,CAAC,IAAI,CAAG,iBACd,CACF,CDzCO,SAAS,EAAmB,CAAoB,EACrD,OAAO,AAAA,EAAU,EAAmB,GACtC,CAOe,SAAA,EAA4B,CAAoB,EAC7D,GAAI,AAAiB,UAAjB,OAAO,EAAoB,CAC7B,EAAQ,AAAA,EAAS,GACjB,IAAM,EAAkB,eACxB,GAAI,EAAM,QAAQ,KAAO,EACvB,MAAM,IAAI,EAAiB,EAE/B,CACA,OAAO,CACT,CDXO,IAAM,EAAiC,CAC5C,WAHiB,eAIjB,WAAY,CAAA,EAAG,QAAQ,QAAQ,CAAC,GAAG,EAAE,QAAQ,OAAO,CAAA,CAAE,AACxD,CAEA,OAAe,EAIb,aAAwB,CACtB,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,eAAe,CAAG,CAAA,CACzB,CACF,CAkBO,MAAM,UAAoC,EAG/C,YAAY,CAAgB,CAAE,CAAyB,CAAE,CAAc,CAAE,CACvE,KAAK,GACL,IAAI,CAAC,OAAO,CAAG,EACgB,WAA3B,OAAO,GACT,CAAA,IAAI,CAAC,eAAe,CAAG,CADzB,EAGI,GACF,CAAA,IAAI,CAAC,KAAK,CAAC,KAAK,CAAG,CADrB,CAGF,CACF,CAqBO,MAAM,UAA4C,EAKvD,YACE,CAAwB,CACxB,CAAyB,CACzB,CAAc,CACd,CAA6B,CAC7B,CAAyB,CACzB,CACA,KAAK,GACL,IAAI,CAAC,QAAQ,CAAG,EACZ,GACF,CAAA,IAAI,CAAC,eAAe,CAAG,CADzB,EAGI,GACF,CAAA,IAAI,CAAC,KAAK,CAAC,KAAK,CAAG,CADrB,EAGI,GACF,CAAA,IAAI,CAAC,aAAa,CAAG,AAAA,EAAmB,EAD1C,EAGI,GACF,CAAA,IAAI,CAAC,eAAe,CAAG,CADzB,CAGF,CACF,CAEO,MAAM,EAGX,YAAY,CAAwB,CAAE,CACpC,IAAI,CAAC,QAAQ,CAAG,CAClB,CACF,CI/GA,IAAK,G,CAAA,EAAA,GAAA,CAAA,E,C,E,O,C,E,C,UAAA,GDWU,eAAA,EACb,CAAsC,CACtC,CAAuB,CACvB,CAAQ,EAER,IAAM,EAA0B,AAAA,SCchC,CAAgD,CAChD,EAAA,CAAqD,EAErD,GAAM,CAAA,OAAC,CAAM,CAAA,UAAE,CAAS,CAAC,CAAG,CAC5B,EAGI,IAAM,EAAO,AAvBnB,SAAuB,CAAgB,CAAE,CAAY,EACnD,IAAM,EAAQ,AAAA,EAwBR,IAvBF,EAAgB,GACpB,IAAK,IAAI,EAAI,EAAG,EAsBV,GAtBoB,IACxB,GAAiB,CAAQ,CAAC,CAAK,CAAC,EAAE,CAAG,EAAS,MAAM,CAAC,CAEvD,OAAO,CACT,EAiBQ,iEACA,IAEI,EAAO,AAAA,EAAU,IAAI,MAE3B,GAAI,CAAC,GAAU,CAAC,GAAa,AAAW,KAAX,GAAiB,AAAc,KAAd,EAC5C,MAAM,IAAI,EAAY,yBAExB,IAAM,EAAU,AAAA,EAAW,SAAU,GACrC,EAAQ,MAAM,CALG,EAAO,GAMxB,IAAM,EAAY,EAAQ,MAAM,CAAC,OACjC,MAAO,CAAC,mBAAmB,EAAE,EAAO,OAAO,EAAE,EAAK,OAAO,EAAE,EAAK,YAAY,EAAE,EAAA,CAAW,AAC7F,CACF,EDnC8C,GAC5C,OAAO,MAAM,MAAM,EAAQ,GAAG,CAAE,CAC9B,QAAS,CACP,cAAe,EACf,eAAgB,kBAClB,EACA,KAAM,KAAK,SAAS,CAAC,GACrB,OAAQ,EAAQ,MAAM,AACxB,GAAG,IAAI,CAAI,MAAM,IACf,GAAI,EAAI,MAAM,EAAI,KAAO,EAAI,MAAM,CAAG,IAAK,CACzC,IAAM,EAA+B,MAAM,EAAI,IAAI,EACnD,OAAM,IAAI,EACR,EAAc,SAAS,CACvB,EAAc,YAAY,CAE9B,CAAO,GAAI,EAAI,MAAM,EAAI,IAEvB,MAAM,IAAI,EAAa,eADF,MAAM,EAAI,IAAI,IAGrC,GAAI,CACF,OAAO,EAAI,IAAI,EACjB,CAAE,MAAO,EAAW,CAElB,MADA,QAAQ,KAAK,CAAC,GACR,AAAI,MAAM,MAAM,EAAI,IAAI,GAChC,CACF,EACF,CEdO,MAAM,EASX,YAAY,CAAgC,CAAE,CAC5C,IAAI,CAAC,SAAS,CAAG,EAAU,SAAS,CACpC,IAAI,CAAC,QAAQ,CAAG,EAAU,QAAQ,CAClC,IAAI,CAAC,SAAS,CAAG,EAAU,SAAS,CACpC,IAAI,CAAC,WAAW,CAAG,EAAU,WAAW,CACxC,IAAI,CAAC,gBAAgB,CAAG,EAAU,gBAAgB,CACrB,KAAA,GAAzB,EAAU,WAAW,EACvB,CAAA,IAAI,CAAC,WAAW,CAAG,AAAA,EAAmB,EAAU,WAAW,CAAA,EAEhC,KAAA,GAAzB,EAAU,WAAW,EACvB,CAAA,IAAI,CAAC,WAAW,CAAG,AAAA,EAAmB,EAAU,WAAW,CAAA,CAE/D,CACF,CCuJO,MAAM,EAoCX,YACE,CAAoE,CACpE,CACA,IAAI,CAAC,SAAS,CAAG,EAAU,SAAS,CACpC,IAAI,CAAC,cAAc,CAAG,EAAU,cAAc,CAC9C,IAAI,CAAC,IAAI,CAAG,EAAU,IAAI,CAC1B,IAAI,CAAC,OAAO,CAAG,EAAU,OAAO,CAChC,IAAI,CAAC,EAAE,CAAG,EAAU,EAAE,CACtB,IAAI,CAAC,UAAU,CAAG,EAAU,UAAU,CACtC,IAAI,CAAC,OAAO,CAAG,EAAU,OAAO,CAChC,IAAI,CAAC,UAAU,CAAG,EAAU,UAAU,CACtC,IAAI,CAAC,MAAM,CAAG,EAAU,MAAM,CAC9B,IAAI,CAAC,IAAI,CAAG,EAAU,IAAI,CAC1B,IAAI,CAAC,SAAS,CAAG,EAAU,SAAS,CACpC,IAAI,CAAC,YAAY,CAAG,EAAU,YAAY,CAC1C,IAAI,CAAC,QAAQ,CAAG,EAAU,QAAQ,CAClC,IAAI,CAAC,WAAW,CAAG,EAAU,WAAW,CACxC,IAAI,CAAC,aAAa,CAAG,EAAU,aAAa,CAC5C,IAAI,CAAC,KAAK,CAAG,EAAU,KAAK,CAC5B,IAAI,CAAC,cAAc,CAAG,EAAU,cAAc,CAC9C,IAAI,CAAC,iBAAiB,CAAG,EAAU,iBAAiB,CACpD,IAAI,CAAC,OAAO,CAAG,EAAU,OAAO,CAChC,IAAI,CAAC,YAAY,CAAG,EAAU,YAAY,CAC1C,IAAI,CAAC,QAAQ,CAAG,EAAU,QAAQ,CAClC,IAAI,CAAC,WAAW,CAAG,EAAU,WAAW,CACxC,IAAI,CAAC,IAAI,CAAG,EAAU,IAAI,CAC1B,IAAI,CAAC,MAAM,CAAG,EAAU,MAAM,CAE1B,gBAAiB,GACnB,CAAA,IAAI,CAAC,WAAW,CAAG,AAAA,EAAmB,EAAU,WAAW,CAAA,EAEzD,gBAAiB,GACnB,CAAA,IAAI,CAAC,WAAW,CAAG,AAAA,EAAmB,EAAU,WAAW,CAAA,CAE/D,CACF,CChNO,MAAM,EAUX,YAAY,CAA2C,CAAE,CACvD,IAAI,CAAC,SAAS,CAAG,EAAU,SAAS,CACpC,IAAI,CAAC,QAAQ,CAAG,EAAU,QAAQ,CACZ,KAAA,GAAlB,EAAU,IAAI,GACZ,AAAyB,UAAzB,OAAO,EAAU,IAAI,CACvB,IAAI,CAAC,IAAI,CAAG,CACV,KAAM,EAAU,IAAI,AACtB,EACkC,UAAzB,OAAO,EAAU,IAAI,EAC9B,CAAA,IAAI,CAAC,IAAI,CAAG,EAAU,IAAI,AAAJ,GAG1B,IAAI,CAAC,QAAQ,CAAG,EAAU,QAAQ,CAClC,IAAI,CAAC,MAAM,CAAG,EAAU,MAAM,CAC9B,IAAI,CAAC,KAAK,CAAG,EAAU,KAAK,CAED,KAAA,GAAvB,EAAU,SAAS,EACrB,CAAA,IAAI,CAAC,WAAW,CAAG,OAAO,MAAM,CAAC,IAAI,CAAC,WAAW,EAAI,CAAC,EAAG,CACvD,IAAK,AAAA,EAAmB,EAAU,SAAS,CAC7C,EAAA,EAEuB,KAAA,GAArB,EAAU,OAAO,EACnB,CAAA,IAAI,CAAC,WAAW,CAAG,OAAO,MAAM,CAAC,IAAI,CAAC,WAAW,EAAI,CAAC,EAAG,CACvD,IAAK,AAAA,EAAmB,EAAU,OAAO,CAC3C,EAAA,CAEJ,CACF,CCnDO,MAAM,EAUX,YAAY,CAAkC,CAAE,CAC9C,IAAI,CAAC,SAAS,CAAG,EAAU,SAAS,CACpC,IAAI,CAAC,QAAQ,CAAG,EAAU,QAAQ,CAClC,IAAI,CAAC,WAAW,CAAG,EAAU,WAAW,CACxC,IAAI,CAAC,YAAY,CAAG,EAAU,YAAY,CAC1C,IAAI,CAAC,QAAQ,CAAG,EAAU,QAAQ,CAClC,IAAI,CAAC,KAAK,CAAG,EAAU,KAAK,CAC5B,IAAI,CAAC,MAAM,CAAG,EAAU,MAAM,CAEH,KAAA,GAAvB,EAAU,SAAS,EACrB,CAAA,IAAI,CAAC,WAAW,CAAG,OAAO,MAAM,CAAC,IAAI,CAAC,WAAW,EAAI,CAAC,EAAG,CACvD,IAAK,AAAA,EAAmB,EAAU,SAAS,CAC7C,EAAA,EAEuB,KAAA,GAArB,EAAU,OAAO,EACnB,CAAA,IAAI,CAAC,WAAW,CAAG,OAAO,MAAM,CAAC,IAAI,CAAC,WAAW,EAAI,CAAC,EAAG,CACvD,IAAK,AAAA,EAAmB,EAAU,OAAO,CAC3C,EAAA,CAEJ,CACF,CC1EO,MAAM,EASX,YAAY,CAA2B,CAAE,CACnC,EAAU,OAAO,GACnB,IAAI,CAAC,QAAQ,CAAG,UAChB,IAAI,CAAC,IAAI,CAAG,KACZ,IAAI,CAAC,KAAK,CAAG,EAAU,OAAO,EAEhC,IAAI,CAAC,QAAQ,CAAG,EAAU,QAAQ,CAClC,IAAI,CAAC,KAAK,CAAG,EAAU,KAAK,CACxB,EAAU,SAAS,EACrB,CAAA,IAAI,CAAC,SAAS,CAAG,AAAA,EAAmB,EAAU,SAAS,CAAA,EAErD,EAAU,OAAO,EACnB,CAAA,IAAI,CAAC,OAAO,CAAG,AAAA,EAAmB,EAAU,OAAO,CAAA,CAEvD,CACF,CCJO,MAAM,EAOX,YAAY,CAA2B,CAAE,CANzC,IAAA,CAAA,IAAA,CAAO,SAOL,IAAI,CAAC,IAAI,CAAG,SACZ,IAAI,CAAC,YAAY,CAAG,EAAU,YAAY,CAC1C,IAAI,CAAC,QAAQ,CAAG,EAAU,QAAQ,CAClC,IAAI,CAAC,KAAK,CAAG,EAAU,KAAK,CAED,KAAA,GAAvB,EAAU,SAAS,EACrB,CAAA,IAAI,CAAC,WAAW,CAAG,OAAO,MAAM,CAAC,IAAI,CAAC,WAAW,EAAI,CAAC,EAAG,CACvD,IAAK,AAAA,EAAmB,EAAU,SAAS,CAC7C,EAAA,EAEuB,KAAA,GAArB,EAAU,OAAO,EACnB,CAAA,IAAI,CAAC,WAAW,CAAG,OAAO,MAAM,CAAC,IAAI,CAAC,WAAW,EAAI,CAAC,EAAG,CACvD,IAAK,AAAA,EAAmB,EAAU,OAAO,CAC3C,EAAA,CAEJ,CACF,CCjBO,MAAM,EASX,YAAY,CAAgC,CAAE,CAC5C,IAAI,CAAC,YAAY,CAAG,EAAU,YAAY,CAC1C,IAAI,CAAC,MAAM,CAAG,EAAU,MAAM,CAC9B,IAAI,CAAC,YAAY,CAAG,EAAU,YAAY,CACpB,KAAA,GAAlB,EAAU,IAAI,GACZ,AAAyB,UAAzB,OAAO,EAAU,IAAI,CACvB,IAAI,CAAC,IAAI,CAAG,CACV,KAAM,EAAU,IAAI,AACtB,EAEA,IAAI,CAAC,IAAI,CAAG,EAAU,IAAI,EAG9B,IAAI,CAAC,MAAM,CAAG,EAAU,MAAM,CAC9B,IAAI,CAAC,QAAQ,CAAG,EAAU,QAAQ,CAClC,IAAI,CAAC,KAAK,CAAG,EAAU,KAAK,AAC9B,CACF,CC/BO,MAAM,EAQX,YAAY,CAAiC,CAAE,CAC7C,IAAI,CAAC,aAAa,CAAG,EAAU,aAAa,CAC5C,IAAI,CAAC,WAAW,CAAG,EAAU,WAAW,CACxC,IAAI,CAAC,YAAY,CAAG,EAAU,YAAY,CACpB,KAAA,GAAlB,EAAU,IAAI,GACZ,AAAyB,UAAzB,OAAO,EAAU,IAAI,CACvB,IAAI,CAAC,IAAI,CAAG,CACV,KAAM,EAAU,IAAI,AACtB,EAEA,IAAI,CAAC,IAAI,CAAG,EAAU,IAAI,EAG9B,IAAI,CAAC,QAAQ,CAAG,EAAU,QAAQ,CAClC,IAAI,CAAC,KAAK,CAAG,EAAU,KAAK,AAC9B,CACF,CCfO,MAAM,EAcX,YAAY,CAA6B,CAAE,CAX3C,IAAA,CAAA,QAAA,CAAsB,UAYpB,IAAI,CAAC,QAAQ,CAAG,EAAU,QAAQ,CAClC,IAAI,CAAC,KAAK,CAAG,EAAU,KAAK,CACxB,EAAU,QAAQ,EACpB,CAAA,IAAI,CAAC,QAAQ,CAAG,EAAU,QAAQ,AAAR,EAExB,EAAU,SAAS,EACrB,CAAA,IAAI,CAAC,SAAS,CAAG,AAAA,EAAmB,EAAU,SAAS,CAAA,EAErD,EAAU,OAAO,EACnB,CAAA,IAAI,CAAC,OAAO,CAAG,AAAA,EAAmB,EAAU,OAAO,CAAA,EAErD,IAAI,CAAC,SAAS,CAAG,EAAU,SAAS,CACpC,IAAI,CAAC,UAAU,CAAG,EAAU,UAAU,CACtC,IAAI,CAAC,OAAO,CAAG,EAAU,OAAO,CAChC,IAAI,CAAC,EAAE,CAAG,EAAU,EAAE,CACtB,IAAI,CAAC,IAAI,CAAG,EAAU,IAAI,CAC1B,IAAI,CAAC,IAAI,CAAG,EAAU,IAAI,CAC1B,IAAI,CAAC,UAAU,CAAG,EAAU,UAAU,AACxC,CACF,CCnEO,MAAM,EAKX,YAAY,CAA+B,CAAE,CACvC,EAAU,SAAS,EACrB,CAAA,IAAI,CAAC,SAAS,CAAG,AAAA,EAAmB,EAAU,SAAS,CAAA,EAErD,EAAU,OAAO,EACnB,CAAA,IAAI,CAAC,OAAO,CAAG,AAAA,EAAmB,EAAU,OAAO,CAAA,EAErD,IAAI,CAAC,eAAe,CAAG,EAAU,eAAe,AAClD,CACF,ClBmFO,MAAM,EAOX,YAAY,CAAc,CAAE,CAAiB,CAAE,CAN9B,IAAA,CAAA,OAAA,CAAU,yBAOzB,IAAI,CAAC,QAAQ,CAAG,CACd,OAAA,EACA,UAAA,CACF,CACF,CAUA,MAAM,KACJ,CAAoD,CACpD,CAA0C,CACL,CACrC,IAAM,EAA0B,EAAE,CAClC,GAAI,MAAM,OAAO,CAAC,GAChB,EAAS,OAAO,CAAC,AAAA,IACf,EAAQ,IAAI,CAAC,IAAI,EAAQ,GAC3B,QACK,GAAK,MAAM,OAAO,CAAC,GAGxB,MAAM,IAAI,EAAgB,wBAF1B,EAAQ,IAAI,CAAC,IAAI,EAAQ,IAI3B,GAAI,AAAmB,IAAnB,EAAQ,MAAM,CAChB,MAAM,IAAI,EACR,gCAGJ,IAAM,EAAY,IAAI,EACpB,EACA,GAAwB,gBACxB,GAAwB,MACxB,GAAwB,cACxB,GAAwB,iBAEpB,EAA+B,CACnC,OAAQ,OACR,IAAK,CAAA,EAAG,IAAI,CAAC,OAAO,CAAC,6BAA6B,CAAC,AACrD,EACA,OAAO,AAAA,EAGL,IAAI,CAAC,QAAQ,CAAE,EAAe,GAAW,IAAI,CAC7C,AAAC,IACC,IAAM,EAAQ,EAAI,SAAS,CAAC,KAAK,CACjC,GACE,EAAI,iBAAiB,CAAC,MAAM,CAAG,GAC/B,EAAM,KAAK,GAAK,EAAM,gBAAgB,CAEtC,MAAM,IAAI,EAAwB,EAAI,iBAAiB,EAEzD,OAAO,CACT,EAEJ,CAOA,MAAM,QACJ,CAAgB,CAChB,CAAc,CACsB,CACpC,IAAM,EAAY,IAAI,EAA4B,EAAS,CAAA,EAAO,GAC5D,EAA+B,CACnC,OAAQ,OACR,IAAK,CAAA,EAAG,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,AACzC,EACA,OAAO,AAAA,EAGL,IAAI,CAAC,QAAQ,CAAE,EAAe,EAClC,CAQA,MAAM,cACJ,CAAgB,CAChB,CAA4B,CACG,CAC/B,IAAM,EAAU,MAAM,IAAI,CAAC,WAAW,GAGtC,OAFA,MAAM,IAAI,CAAC,kBAAkB,CAAC,EAAS,CAAC,EAAQ,EAChD,EAAgB,AAAA,EAAmB,GAC5B,IAAI,CAAC,YAAY,CAAC,EAAS,EACpC,CAQA,MAAM,YACJ,CAAyB,CACzB,CAAc,CACd,CAAqC,CACnB,CAClB,EAAkB,GAAmB,CAAA,EACrC,GAAM,CAAA,WAAC,CAAU,CAAA,WAAE,CAAU,CAAC,CAAG,EAC3B,EAA+B,CACnC,OAAQ,OACR,IAAK,CAAA,EAAG,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,AAC3C,EACA,OAAO,AAAA,EACL,IAAI,CAAC,QAAQ,CACb,EACA,CACE,WAAA,EACA,WAAA,EACA,gBAAA,EACA,MAAA,EACA,aAAA,CACF,GACA,IAAI,CAAC,AAAA,GAAO,EAAI,OAAO,CAC3B,CASA,MAAM,mBACJ,CAAgB,CAChB,CAAkC,CACL,CAC7B,IAAM,EAA+B,CACnC,OAAQ,MACR,IAAK,CAAA,EAAG,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE,EAAQ,SAAS,CAAC,AAC/D,EACA,OAAO,AAAA,EACL,IAAI,CAAC,QAAQ,CACb,EACA,IAAI,EAAuB,GAE/B,CAMA,MAAM,UAAU,CAAgB,CAAiC,CAC/D,IAAM,EAA+B,CACnC,OAAQ,OACR,IAAK,CAAA,EAAG,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE,EAAQ,KAAK,CAAC,AAC3D,EACA,OAAO,AAAA,EACL,IAAI,CAAC,QAAQ,CACb,EAEJ,CAOA,MAAM,aAAa,CAAgB,CAAE,CAAmB,CAAE,CACxD,IAAM,EAA+B,CACnC,OAAQ,OACR,IAAK,CAAA,EAAG,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE,EAAQ,SAAS,CAAC,AAC/D,EACM,EAAyB,AAAA,EAAU,GACzC,OAAO,AAAA,EACL,IAAI,CAAC,QAAQ,CACb,EACA,CACE,cAAe,CACjB,EAEJ,CAMA,MAAM,SAAS,CAAgB,CAAiC,CAC9D,IAAM,EAA+B,CACnC,OAAQ,MACR,IAAK,CAAA,EAAG,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE,EAAA,CAAS,AACtD,EACA,OAAO,AAAA,EACL,IAAI,CAAC,QAAQ,CACb,EAEJ,CAMA,MAAM,UAAU,CAAuB,CAAE,CACvC,IAAI,EAAoC,CAAC,EACrC,GACF,CAAA,EAAU,IAAI,EAAyB,EADzC,EAGA,IAAM,EAAY,AAAA,EAAG,SAAS,CAAC,EAAS,CACtC,QAAS,CAAA,EACT,eAAgB,CAAA,CAClB,GACM,EAAW,CAAA,EAAG,IAAI,CAAC,OAAO,CAAC,mBAAmB,EAAE,EAAA,CAAW,CAKjE,OAAO,AAAA,EACL,IAAI,CAAC,QAAQ,CALsB,CACnC,OAAQ,MACR,IAAK,CACP,EAKF,CAOA,MAAM,iBACJ,CAAgB,CAChB,CAA8B,CACA,CAC9B,IAAM,EAAY,AAAA,EAAG,SAAS,CAAC,EAAM,CACnC,QAAS,CAAA,EACT,eAAgB,CAAA,CAClB,GACM,EAAW,CAAA,EAAG,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE,EAAQ,SAAS,EAAE,EAAA,CAAW,CAKrF,OAAO,AAAA,EACL,IAAI,CAAC,QAAQ,CALsB,CACnC,OAAQ,MACR,IAAK,CACP,EAKF,CAOA,MAAM,oBACJ,CAAgB,CAChB,CAAmC,CACG,CACtC,IAAM,EAA+B,CACnC,OAAQ,SACR,IAAK,CAAA,EAAG,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE,EAAQ,SAAS,CAAC,AAC/D,EACA,OAAO,AAAA,EAGL,IAAI,CAAC,QAAQ,CAAE,EAAe,CAAC,WAAA,CAAU,EAC7C,CAMA,MAAM,yBACJ,CAAgB,CACe,CAC/B,IAAM,EAA+B,CACnC,OAAQ,SACR,IAAK,CAAA,EAAG,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE,EAAQ,SAAS,CAAC,AAC/D,EACA,OAAO,AAAA,EACL,IAAI,CAAC,QAAQ,CACb,EAEJ,CAMA,MAAM,YAAY,CAAgB,CAAE,CAClC,IAAM,EAA+B,CACnC,OAAQ,SACR,IAAK,CAAA,EAAG,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE,EAAA,CAAS,AACtD,EACA,OAAO,AAAA,EACL,IAAI,CAAC,QAAQ,CACb,EAEJ,CAMA,MAAM,YACJ,CAAmC,CACL,CAC9B,IAAI,EAAsC,CAAC,EACvC,GACF,CAAA,EAAU,IAAI,EAA2B,EAD3C,EAGA,IAAM,EAAY,AAAA,EAAG,SAAS,CAAC,EAAS,CACtC,QAAS,CAAA,EACT,eAAgB,CAAA,CAClB,GACM,EAAW,CAAA,EAAG,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,EAAA,CAAW,CAK/D,OAAO,AAAA,EACL,IAAI,CAAC,QAAQ,CALsB,CACnC,OAAQ,MACR,IAAK,CACP,EAKF,CAOA,MAAM,cACJ,CAAqC,CACL,CAChC,IAAI,EAAwC,CAAC,EACzC,GACF,CAAA,EAAU,IAAI,EAA6B,EAD7C,EAGA,IAAM,EAAY,AAAA,EAAG,SAAS,CAAC,EAAS,CACtC,QAAS,CAAA,EACT,eAAgB,CAAA,CAClB,GACM,EAAW,CAAA,EAAG,IAAI,CAAC,OAAO,CAAC,uBAAuB,EAAE,EAAA,CAAW,CAKrE,OAAO,AAAA,EACL,IAAI,CAAC,QAAQ,CALsB,CACnC,OAAQ,MACR,IAAK,CACP,EAKF,CAMA,MAAM,YAA0C,CAC9C,IAAM,EAA+B,CACnC,OAAQ,MACR,IAAK,CAAA,EAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,AACxC,EACM,EAAW,MAAM,AAAA,EACrB,IAAI,CAAC,QAAQ,CACb,GAEF,MAAO,CACL,QAAS,EAAS,OAAO,CACzB,MAAO,EAAS,KAAK,AACvB,CACF,CAUA,MAAM,WACJ,CAAgB,CAChB,CAAkB,CAClB,CAAa,CACb,CAAa,CACgB,CAC7B,IAAM,EAAc,MAAM,AAAA,EAAc,GAClC,EAA+B,CACnC,OAAQ,OACR,IAAK,CAAA,EAAG,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,AACzC,EAOA,OAAO,AAAA,EACL,IAAI,CAAC,QAAQ,CACb,EARmC,CACnC,KAAM,EACN,KAAM,EACN,KAAA,EACA,KAAA,CACF,EAMF,CAKA,MAAM,2BAAkE,CACtE,IAAM,EAA+B,CACnC,OAAQ,MACR,IAAK,CAAA,EAAG,IAAI,CAAC,OAAO,CAAC,6BAA6B,CAAC,AACrD,EACA,OAAO,AAAA,EACL,IAAI,CAAC,QAAQ,CACb,EAEJ,CAMA,MAAM,iBACJ,CAA8B,CACa,CAC3C,IAAI,EAA2C,CAAC,EAC5C,GACF,CAAA,EAAU,IAAI,EAAgC,EADhD,EAGA,IAAM,EAAY,AAAA,EAAG,SAAS,CAAC,EAAS,CAAC,QAAS,CAAA,CAAK,GACjD,EAAW,CAAA,EAAG,IAAI,CAAC,OAAO,CAAC,mBAAmB,EAAE,EAAA,CAAW,CAK3D,EAAW,MAAM,AAAA,EACrB,IAAI,CAAC,QAAQ,CALsB,CACnC,OAAQ,MACR,IAAK,CACP,GAKM,EAAc,EAApB,CACA,IAAK,IAAM,KAAW,EAAS,WAAW,CACxC,EAAY,IAAI,CAAC,IAAI,EAAa,IAEpC,MAAO,CACL,MAAO,EAAS,KAAK,CACrB,QAAS,EAAS,OAAO,CACzB,SAAU,EAAS,QAAQ,CAC3B,YAAA,CACF,CACF,CAMA,MAAM,gBAAgB,CAAiB,CAAyB,CAC9D,IAAM,EAA+B,CACnC,OAAQ,MACR,IAAK,CAAA,EAAG,IAAI,CAAC,OAAO,CAAC,mBAAmB,EAAE,EAAA,CAAW,AACvD,EAKA,OAAO,IAAI,EAJM,MAAM,AAAA,EACrB,IAAI,CAAC,QAAQ,CACb,GAGJ,CAKA,MAAM,yBACJ,CAAoC,CACO,CAC3C,IAAM,EAA+B,CACnC,OAAQ,OACR,IAAK,CAAA,EAAG,IAAI,CAAC,OAAO,CAAC,wBAAwB,CAAC,AAChD,EACA,OAAO,AAAA,EAGL,IAAI,CAAC,QAAQ,CAAE,EAAe,EAClC,CAMA,MAAM,mBACJ,CAA+B,CACM,CACrC,IAAM,EAA+B,CACnC,OAAQ,OACR,IAAK,CAAA,EAAG,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,AAC1C,EACA,OAAO,AAAA,EAGL,IAAI,CAAC,QAAQ,CAAE,EAAe,EAClC,CAMA,MAAM,mBAAmB,CAAiB,CAAyB,CACjE,IAAM,EAA+B,CACnC,OAAQ,SACR,IAAK,CAAA,EAAG,IAAI,CAAC,OAAO,CAAC,mBAAmB,EAAE,EAAA,CAAW,AACvD,EACA,OAAO,AAAA,EAAoC,IAAI,CAAC,QAAQ,CAAE,EAC5D,CAMA,MAAM,0BACJ,CAAuC,CACa,CACpD,IAAI,EAAoD,CAAC,EACrD,GACF,CAAA,EAAU,IAAI,EAAyC,EADzD,EAIA,IAAM,EAAY,AAAA,EAAG,SAAS,CAAC,EAAS,CAAC,QAAS,CAAA,CAAK,GACjD,EAAW,CAAA,EAAG,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE,EAAA,CAAW,CAK5D,EAAW,MAAM,AAAA,EAGrB,IAAI,CAAC,QAAQ,CAPsB,CACnC,OAAQ,MACR,IAAK,CACP,GAMM,EAAe,EAArB,CACA,IAAK,IAAM,KAAY,EAAS,YAAY,CAC1C,EAAa,IAAI,CAAC,IAAI,EAAsB,IAG9C,MAAO,CACL,MAAO,EAAS,KAAK,CACrB,QAAS,EAAS,OAAO,CACzB,SAAU,EAAS,QAAQ,CAC3B,aAAA,CACF,CACF,CAMA,MAAM,yBACJ,CAAkB,CACc,CAChC,IAAM,EAA+B,CACnC,OAAQ,MACR,IAAK,CAAA,EAAG,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE,EAAA,CAAY,AACzD,EAKA,OAAO,IAAI,EAJM,MAAM,AAAA,EACrB,IAAI,CAAC,QAAQ,CACb,GAGJ,CAKA,MAAM,oCAEJ,CACA,IAAM,EAA+B,CACnC,OAAQ,MACR,IAAK,CAAA,EAAG,IAAI,CAAC,OAAO,CAAC,8BAA8B,CAAC,AACtD,EACA,OAAO,AAAA,EACL,IAAI,CAAC,QAAQ,CACb,EAEJ,CAOA,MAAM,4BACJ,CAAwC,CACR,CAChC,IAAM,EAA+B,CACnC,OAAQ,OACR,IAAK,CAAA,EAAG,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,AAC3C,EAOA,OAAO,IAAI,EALM,MAAM,AAAA,EAGrB,IAAI,CAAC,QAAQ,CAAE,EAAe,GAGlC,CAMA,MAAM,uCACJ,CAAkB,CACc,CAChC,IAAM,EAA+B,CACnC,OAAQ,MACR,IAAK,CAAA,EAAG,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE,EAAW,WAAW,CAAC,AACpE,EAMA,OAAO,IAAI,EALM,MAAM,AAAA,EAGrB,IAAI,CAAC,QAAQ,CAAE,GAGnB,CAMA,MAAM,sCACJ,CAAkB,CACc,CAChC,IAAM,EAA+B,CACnC,OAAQ,MACR,IAAK,CAAA,EAAG,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE,EAAW,kBAAkB,CAAC,AAC3E,EAMA,OAAO,IAAI,EALM,MAAM,AAAA,EAGrB,IAAI,CAAC,QAAQ,CAAE,GAGnB,CAOA,MAAM,4BACJ,CAAkB,CAClB,CAAwC,CACR,CAChC,IAAM,EAA+B,CACnC,OAAQ,MACR,IAAK,CAAA,EAAG,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE,EAAA,CAAY,AACzD,EAMA,OAAO,IAAI,EALM,MAAM,AAAA,EAGrB,IAAI,CAAC,QAAQ,CAAE,EAAe,GAGlC,CAOA,MAAM,gCACJ,CAAkB,CAClB,CAAY,CACoB,CAChC,IAAM,EAA+B,CACnC,OAAQ,MACR,IAAK,CAAA,EAAG,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE,EAAW,KAAK,CAAC,AAC9D,EAQA,OAAO,IAAI,EAPM,MAAM,AAAA,EAKrB,IAAI,CAAC,QAAQ,CAAE,EAAe,CAAC,KAAA,CAAI,GAGvC,CAOA,MAAM,4BACJ,CAAkB,CACc,CAChC,OAAO,IAAI,CAAC,2BAA2B,CAAC,EAC1C,CAMA,MAAM,4BACJ,CAAkB,CACc,CAChC,IAAM,EAA+B,CACnC,OAAQ,SACR,IAAK,CAAA,EAAG,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE,EAAA,CAAY,AACzD,EAMA,OAAO,IAAI,EALM,MAAM,AAAA,EAGrB,IAAI,CAAC,QAAQ,CAAE,GAGnB,CAOA,MAAM,UAAU,CAAuB,CAA8B,CACnE,IAAI,EAAoC,CAAC,KAAM,QAAQ,EACnD,GACF,CAAA,EAAU,IAAI,EAAyB,EADzC,EAGA,IAAM,EAAY,AAAA,EAAG,SAAS,CAAC,EAAS,CACtC,QAAS,CAAA,EACT,eAAgB,CAAA,CAClB,GACM,EAAW,CAAA,EAAG,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,EAAA,CAAW,CAK3D,OAAO,AAAA,EACL,IAAI,CAAC,QAAQ,CALsB,CACnC,OAAQ,MACR,IAAK,CACP,EAKF,CAOA,MAAM,eACJ,CAA4B,CACK,CACjC,IAAI,EAAyC,CAAC,EAC1C,GACF,CAAA,EAAU,IAAI,EAA8B,EAD9C,EAGA,IAAM,EAAY,AAAA,EAAG,SAAS,CAAC,EAAS,CACtC,QAAS,CAAA,EACT,eAAgB,CAAA,CAClB,GACM,EAAW,CAAA,EAAG,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE,EAAA,CAAW,CAKlE,OAAO,AAAA,EACL,IAAI,CAAC,QAAQ,CALsB,CACnC,OAAQ,MACR,IAAK,CACP,EAKF,CAOA,MAAM,gBACJ,CAA6B,CACK,CAClC,IAAI,EAA0C,CAAC,EAC3C,GACF,CAAA,EAAU,IAAI,EAA+B,EAD/C,EAGA,IAAM,EAAY,AAAA,EAAG,SAAS,CAAC,EAAS,CACtC,QAAS,CAAA,EACT,eAAgB,CAAA,CAClB,GACM,EAAW,CAAA,EAAG,IAAI,CAAC,OAAO,CAAC,qBAAqB,EAAE,EAAA,CAAW,CAKnE,OAAO,AAAA,EACL,IAAI,CAAC,QAAQ,CALsB,CACnC,OAAQ,MACR,IAAK,CACP,EAKF,CACF,Q,K,oB,C,K,gB,C,K,W,C,K,Y,C,K,uB,C,K,e","sources":["<anon>","src/solapi.ts","src/models/message.ts","src/models/kakao/kakaoOption.ts","src/models/rcs/rcsOption.ts","src/requests/messageRequest.ts","src/lib/stringDateTrasnfer.ts","src/errors/defaultError.ts","src/lib/defaultFetcher.ts","src/lib/authenticator.ts","src/models/kakao/kakaoChannel.ts","src/models/kakao/kakaoAlimtalkTemplate.ts","src/requests/kakao/getKakaoAlimtalkTemplatesRequest.ts","src/requests/kakao/getKakaoChannelsRequest.ts","src/requests/messages/groups/getGroupsRequest.ts","src/requests/iam/getBlacksRequest.ts","src/requests/iam/getBlockGroupsRequest.ts","src/requests/iam/getBlockNumbersRequest.ts","src/requests/messages/getMessagesRequest.ts","src/requests/messages/statistics/getStatisticsRequest.ts"],"sourcesContent":["import {formatISO as $7WnbQ$formatISO, parseISO as $7WnbQ$parseISO} from \"date-fns\";\nimport $7WnbQ$imagetobase64 from \"image-to-base64\";\nimport $7WnbQ$qs from \"qs\";\nimport {randomBytes as $7WnbQ$randomBytes, createHmac as $7WnbQ$createHmac} from \"node:crypto\";\n\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\nclass $7c1c443a022e843e$export$bccc93b4c0d31aea {\n    constructor(parameter){\n        this.pfId = parameter.pfId;\n        this.templateId = parameter.templateId;\n        this.variables = parameter.variables;\n        this.disableSms = parameter.disableSms;\n        this.adFlag = parameter.adFlag;\n        this.buttons = parameter.buttons;\n        this.imageId = parameter.imageId;\n    }\n}\n\n\nclass $2b6f659bec894763$export$c8e87b3eb2224744 {\n    constructor(parameter){\n        this.brandId = parameter.brandId;\n        this.templateId = parameter.templateId;\n        this.copyAllowed = parameter.copyAllowed;\n        this.mmsType = parameter.mmsType;\n        this.commercialType = parameter.commercialType;\n        this.variables = parameter.variables;\n        this.disableSms = parameter.disableSms;\n        this.additionalBody = parameter.additionalBody;\n        this.buttons = parameter.buttons;\n    }\n}\n\n\nclass $27af694b436994e7$export$f69c19e57285b83a {\n    constructor(parameter){\n        this.to = parameter.to;\n        this.from = parameter.from;\n        this.text = parameter.text;\n        this.imageId = parameter.imageId;\n        this.type = parameter.type;\n        this.subject = parameter.subject;\n        this.autoTypeDetect = parameter.autoTypeDetect;\n        this.country = parameter.country;\n        if (parameter.kakaoOptions != undefined) this.kakaoOptions = new (0, $7c1c443a022e843e$export$bccc93b4c0d31aea)(parameter.kakaoOptions);\n        if (parameter.rcsOptions != undefined) this.rcsOptions = new (0, $2b6f659bec894763$export$c8e87b3eb2224744)(parameter.rcsOptions);\n        this.customFields = parameter.customFields;\n        this.replacements = parameter.replacements;\n        this.faxOptions = parameter.faxOptions;\n    }\n}\n\n\n\nvar $d52a8906032dc4a4$exports = {};\n\n$parcel$export($d52a8906032dc4a4$exports, \"InvalidDateError\", () => $d52a8906032dc4a4$export$7522646e65a7a5d1);\n$parcel$export($d52a8906032dc4a4$exports, \"ApiKeyError\", () => $d52a8906032dc4a4$export$6efc4418efdbd5bb);\n$parcel$export($d52a8906032dc4a4$exports, \"DefaultError\", () => $d52a8906032dc4a4$export$c73ca302efeda3b4);\n$parcel$export($d52a8906032dc4a4$exports, \"MessageNotReceivedError\", () => $d52a8906032dc4a4$export$b75729dbe9bbac3a);\n$parcel$export($d52a8906032dc4a4$exports, \"BadRequestError\", () => $d52a8906032dc4a4$export$6bfa95453d427b2b);\nclass $d52a8906032dc4a4$export$7522646e65a7a5d1 extends Error {\n    constructor(message){\n        super(message);\n        this.name = 'InvalidDateError';\n    }\n}\nclass $d52a8906032dc4a4$export$6efc4418efdbd5bb extends Error {\n    constructor(message){\n        super(message);\n        this.name = 'InvalidApiKeyError';\n    }\n}\nclass $d52a8906032dc4a4$export$c73ca302efeda3b4 extends Error {\n    constructor(errorCode, errorMessage){\n        super(errorMessage);\n        this.name = errorCode;\n    }\n}\nclass $d52a8906032dc4a4$export$b75729dbe9bbac3a extends Error {\n    constructor(errorList){\n        const statusMessageCount = errorList.length;\n        super(`${statusMessageCount}\\u{AC1C}\\u{C758} \\u{BA54}\\u{C2DC}\\u{C9C0}\\u{AC00} \\u{C811}\\u{C218}\\u{B418}\\u{C9C0} \\u{BABB}\\u{D588}\\u{C2B5}\\u{B2C8}\\u{B2E4}. \\u{C790}\\u{C138}\\u{D55C} \\u{C5D0}\\u{B7EC} \\u{BA54}\\u{C2DC}\\u{C9C0}\\u{B294} \\u{D574}\\u{B2F9} \\u{C5D0}\\u{B7EC} \\u{B0B4} failedMessageList\\u{B97C} \\u{D655}\\u{C778}\\u{D574}\\u{C8FC}\\u{C138}\\u{C694}.`);\n        this.name = 'MessagesNotReceivedError';\n        this.failedMessageList = errorList;\n    }\n}\nclass $d52a8906032dc4a4$export$6bfa95453d427b2b extends Error {\n    constructor(message){\n        super(message);\n        this.name = 'BadRequestError';\n    }\n}\n\n\nfunction $66c26f4d178df746$export$5dab325bd79b963d(value) {\n    return (0, $7WnbQ$formatISO)($66c26f4d178df746$export$2e2bcd8739ae039(value));\n}\nfunction $66c26f4d178df746$export$2e2bcd8739ae039(value) {\n    if (typeof value === 'string') {\n        value = (0, $7WnbQ$parseISO)(value);\n        const invalidDateText = 'Invalid Date';\n        if (value.toString() === invalidDateText) throw new (0, $d52a8906032dc4a4$export$7522646e65a7a5d1)(invalidDateText);\n    }\n    return value;\n}\n\n\n// NOTE: Need to update when publish library.\nconst $5a82f42370a799c2$var$sdkVersion = 'nodejs/5.4.0';\nconst $5a82f42370a799c2$export$fb47e5c0b633ea53 = {\n    sdkVersion: $5a82f42370a799c2$var$sdkVersion,\n    osPlatform: `${process.platform} | ${process.version}`\n};\nclass $5a82f42370a799c2$var$DefaultMessageRequest {\n    constructor(){\n        this.agent = $5a82f42370a799c2$export$fb47e5c0b633ea53;\n        this.allowDuplicates = false;\n    }\n}\nclass $5a82f42370a799c2$export$ad3dca884a810e33 extends $5a82f42370a799c2$var$DefaultMessageRequest {\n    constructor(message, allowDuplicates, appId){\n        super();\n        this.message = message;\n        if (typeof allowDuplicates === 'boolean') this.allowDuplicates = allowDuplicates;\n        if (appId) this.agent.appId = appId;\n    }\n}\nclass $5a82f42370a799c2$export$b4becc1d7edb915a extends $5a82f42370a799c2$var$DefaultMessageRequest {\n    constructor(messages, allowDuplicates, appId){\n        super();\n        this.messages = messages;\n        if (typeof allowDuplicates === 'boolean') this.allowDuplicates = allowDuplicates;\n        if (appId) this.agent.appId = appId;\n    }\n}\nclass $5a82f42370a799c2$export$c4f11270a1f4daf1 extends $5a82f42370a799c2$var$DefaultMessageRequest {\n    constructor(messages, allowDuplicates, appId, scheduledDate, showMessageList){\n        super();\n        this.messages = messages;\n        if (allowDuplicates) this.allowDuplicates = allowDuplicates;\n        if (appId) this.agent.appId = appId;\n        if (scheduledDate) this.scheduledDate = (0, $66c26f4d178df746$export$5dab325bd79b963d)(scheduledDate);\n        if (showMessageList) this.showMessageList = showMessageList;\n    }\n}\nclass $5a82f42370a799c2$export$6ba9c27a351bdec2 {\n    constructor(messages){\n        this.messages = messages;\n    }\n}\n\n\n\n\n\nvar $1abac90f3d49bca7$var$AuthenticateType = /*#__PURE__*/ function(AuthenticateType) {\n    AuthenticateType[AuthenticateType[\"API_KEY\"] = 0] = \"API_KEY\";\n    return AuthenticateType;\n}($1abac90f3d49bca7$var$AuthenticateType || {});\n/**\n * 특정 사이즈의 텍스트를 생성합니다.\n * @param alphabet 지정할 알파벳/숫자 문자열\n * @param size 지정할 문자 길이\n */ function $1abac90f3d49bca7$var$genCustomText(alphabet, size) {\n    const bytes = (0, $7WnbQ$randomBytes)(size);\n    let genRandomText = '';\n    for(let i = 0; i < size; i++)genRandomText += alphabet[bytes[i] % alphabet.length];\n    return genRandomText;\n}\nfunction $1abac90f3d49bca7$export$2e2bcd8739ae039(authenticationParameter, authType = 0) {\n    const { apiKey: apiKey, apiSecret: apiSecret } = authenticationParameter;\n    switch(authType){\n        case 0:\n        default:\n            const salt = $1abac90f3d49bca7$var$genCustomText('1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 32);\n            const date = (0, $7WnbQ$formatISO)(new Date());\n            const hmacData = date + salt;\n            if (!apiKey || !apiSecret || apiKey === '' || apiSecret === '') throw new (0, $d52a8906032dc4a4$export$6efc4418efdbd5bb)('Invalid API Key Error');\n            const genHmac = (0, $7WnbQ$createHmac)('sha256', apiSecret);\n            genHmac.update(hmacData);\n            const signature = genHmac.digest('hex');\n            return `HMAC-SHA256 apiKey=${apiKey}, date=${date}, salt=${salt}, signature=${signature}`;\n    }\n}\n\n\n\nasync function $8e16545f15d59ac0$export$2e2bcd8739ae039(authParameter, request, data) {\n    const authorizationHeaderData = (0, $1abac90f3d49bca7$export$2e2bcd8739ae039)(authParameter);\n    return await fetch(request.url, {\n        headers: {\n            Authorization: authorizationHeaderData,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data),\n        method: request.method\n    }).then(async (res)=>{\n        if (res.status >= 400 && res.status < 500) {\n            const errorResponse = await res.json();\n            throw new (0, $d52a8906032dc4a4$export$c73ca302efeda3b4)(errorResponse.errorCode, errorResponse.errorMessage);\n        } else if (res.status >= 500) {\n            const responseText = await res.text();\n            throw new (0, $d52a8906032dc4a4$export$c73ca302efeda3b4)('UnknownError', responseText);\n        }\n        try {\n            return res.json();\n        } catch (exception) {\n            console.error(exception);\n            throw new Error(await res.text());\n        }\n    });\n}\n\n\n\n\n\n\n\nclass $35853283150d7335$export$4ec3af33017d2d92 {\n    constructor(parameter){\n        this.channelId = parameter.channelId;\n        this.searchId = parameter.searchId;\n        this.accountId = parameter.accountId;\n        this.phoneNumber = parameter.phoneNumber;\n        this.sharedAccountIds = parameter.sharedAccountIds;\n        if (parameter.dateCreated != undefined) this.dateCreated = (0, $66c26f4d178df746$export$2e2bcd8739ae039)(parameter.dateCreated);\n        if (parameter.dateUpdated != undefined) this.dateUpdated = (0, $66c26f4d178df746$export$2e2bcd8739ae039)(parameter.dateUpdated);\n    }\n}\n\n\n\nclass $7484651a5b4bc2a1$export$16a18a4d633c3913 {\n    constructor(parameter){\n        this.channelId = parameter.channelId;\n        this.channelGroupId = parameter.channelGroupId;\n        this.name = parameter.name;\n        this.content = parameter.content;\n        this.ad = parameter.ad;\n        this.assignType = parameter.assignType;\n        this.buttons = parameter.buttons;\n        this.templateId = parameter.templateId;\n        this.header = parameter.header;\n        this.item = parameter.item;\n        this.highlight = parameter.highlight;\n        this.securityFlag = parameter.securityFlag;\n        this.isHidden = parameter.isHidden;\n        this.messageType = parameter.messageType;\n        this.emphasizeType = parameter.emphasizeType;\n        this.extra = parameter.extra;\n        this.emphasizeTitle = parameter.emphasizeTitle;\n        this.emphasizeSubtitle = parameter.emphasizeSubtitle;\n        this.imageId = parameter.imageId;\n        this.quickReplies = parameter.quickReplies;\n        this.comments = parameter.comments;\n        this.commentable = parameter.commentable;\n        this.code = parameter.code;\n        this.status = parameter.status;\n        if ('dateCreated' in parameter) this.dateCreated = (0, $66c26f4d178df746$export$2e2bcd8739ae039)(parameter.dateCreated);\n        if ('dateUpdated' in parameter) this.dateUpdated = (0, $66c26f4d178df746$export$2e2bcd8739ae039)(parameter.dateUpdated);\n    }\n}\n\n\n\n\nclass $34cc2bc2228ab247$export$91fde5f4988e5a2 {\n    constructor(parameter){\n        this.channelId = parameter.channelId;\n        this.isHidden = parameter.isHidden;\n        if (parameter.name != undefined) {\n            if (typeof parameter.name == 'string') this.name = {\n                like: parameter.name\n            };\n            else if (typeof parameter.name == 'object') this.name = parameter.name;\n        }\n        this.startKey = parameter.startKey;\n        this.status = parameter.status;\n        this.limit = parameter.limit;\n        if (parameter.startDate != undefined) this.dateCreated = Object.assign(this.dateCreated ?? {}, {\n            gte: (0, $66c26f4d178df746$export$5dab325bd79b963d)(parameter.startDate)\n        });\n        if (parameter.endDate != undefined) this.dateCreated = Object.assign(this.dateCreated ?? {}, {\n            lte: (0, $66c26f4d178df746$export$5dab325bd79b963d)(parameter.endDate)\n        });\n    }\n}\n\n\n\nclass $a9079e4564020ba4$export$28223677cbfc90e7 {\n    constructor(parameter){\n        this.channelId = parameter.channelId;\n        this.searchId = parameter.searchId;\n        this.phoneNumber = parameter.phoneNumber;\n        this.categoryCode = parameter.categoryCode;\n        this.startKey = parameter.startKey;\n        this.limit = parameter.limit;\n        this.isMine = parameter.isMine;\n        if (parameter.startDate != undefined) this.dateCreated = Object.assign(this.dateCreated ?? {}, {\n            gte: (0, $66c26f4d178df746$export$5dab325bd79b963d)(parameter.startDate)\n        });\n        if (parameter.endDate != undefined) this.dateCreated = Object.assign(this.dateCreated ?? {}, {\n            lte: (0, $66c26f4d178df746$export$5dab325bd79b963d)(parameter.endDate)\n        });\n    }\n}\n\n\n\nclass $40788678671ec46e$export$7d6fa05e85a55793 {\n    constructor(parameter){\n        if (parameter.groupId) {\n            this.criteria = 'groupId';\n            this.cond = 'eq';\n            this.value = parameter.groupId;\n        }\n        this.startKey = parameter.startKey;\n        this.limit = parameter.limit;\n        if (parameter.startDate) this.startDate = (0, $66c26f4d178df746$export$5dab325bd79b963d)(parameter.startDate);\n        if (parameter.endDate) this.endDate = (0, $66c26f4d178df746$export$5dab325bd79b963d)(parameter.endDate);\n    }\n}\n\n\n\nclass $f227b10eb7f29df4$export$a03fd6f891b485aa {\n    constructor(parameter){\n        this.type = 'DENIAL';\n        this.type = 'DENIAL';\n        this.senderNumber = parameter.senderNumber;\n        this.startKey = parameter.startKey;\n        this.limit = parameter.limit;\n        if (parameter.startDate != undefined) this.dateCreated = Object.assign(this.dateCreated ?? {}, {\n            gte: (0, $66c26f4d178df746$export$5dab325bd79b963d)(parameter.startDate)\n        });\n        if (parameter.endDate != undefined) this.dateCreated = Object.assign(this.dateCreated ?? {}, {\n            lte: (0, $66c26f4d178df746$export$5dab325bd79b963d)(parameter.endDate)\n        });\n    }\n}\n\n\nclass $8116b601679486db$export$e63e46a11fc5d3c {\n    constructor(parameter){\n        this.blockGroupId = parameter.blockGroupId;\n        this.useAll = parameter.useAll;\n        this.senderNumber = parameter.senderNumber;\n        if (parameter.name != undefined) {\n            if (typeof parameter.name == 'string') this.name = {\n                like: parameter.name\n            };\n            else this.name = parameter.name;\n        }\n        this.status = parameter.status;\n        this.startKey = parameter.startKey;\n        this.limit = parameter.limit;\n    }\n}\n\n\nclass $a230e645f76924d3$export$df706d57151d1b78 {\n    constructor(parameter){\n        this.blockNumberId = parameter.blockNumberId;\n        this.phoneNumber = parameter.phoneNumber;\n        this.blockGroupId = parameter.blockGroupId;\n        if (parameter.memo != undefined) {\n            if (typeof parameter.memo == 'string') this.memo = {\n                like: parameter.memo\n            };\n            else this.memo = parameter.memo;\n        }\n        this.startKey = parameter.startKey;\n        this.limit = parameter.limit;\n    }\n}\n\n\n\nclass $f311dcba24d92cc0$export$18a889443adf01a3 {\n    constructor(parameter){\n        this.dateType = 'CREATED';\n        this.startKey = parameter.startKey;\n        this.limit = parameter.limit;\n        if (parameter.dateType) this.dateType = parameter.dateType;\n        if (parameter.startDate) this.startDate = (0, $66c26f4d178df746$export$5dab325bd79b963d)(parameter.startDate);\n        if (parameter.endDate) this.endDate = (0, $66c26f4d178df746$export$5dab325bd79b963d)(parameter.endDate);\n        this.messageId = parameter.messageId;\n        this.messageIds = parameter.messageIds;\n        this.groupId = parameter.groupId;\n        this.to = parameter.to;\n        this.from = parameter.from;\n        this.type = parameter.type;\n        this.statusCode = parameter.statusCode;\n    }\n}\n\n\n\nclass $314d4b5bf783a3ae$export$bc0a97822f19395c {\n    constructor(parameter){\n        if (parameter.startDate) this.startDate = (0, $66c26f4d178df746$export$5dab325bd79b963d)(parameter.startDate);\n        if (parameter.endDate) this.endDate = (0, $66c26f4d178df746$export$5dab325bd79b963d)(parameter.endDate);\n        this.masterAccountId = parameter.masterAccountId;\n    }\n}\n\n\nclass $9377f5ff7761f7c6$export$34e7265c65c60ffd {\n    constructor(apiKey, apiSecret){\n        this.baseUrl = 'https://api.solapi.com';\n        this.authInfo = {\n            apiKey: apiKey,\n            apiSecret: apiSecret\n        };\n    }\n    /**\n   * 메시지 발송 기능, sendMany 함수보다 개선된 오류 표시 기능등을 제공합니다.\n   * 한번의 요청으로 최대 10,000건까지 발송할 수 있습니다.\n   * @param messages 발송 요청할 메시지 파라미터(문자, 알림톡 등)\n   * @param requestConfigParameter request시 필요한 파라미터 오브젝트\n   * @throws MessageNotReceivedError 모든 메시지 접수건이 실패건으로 진행되는 경우 반환되는 에러\n   * @throws BadRequestError 잘못된 파라미터를 기입했거나, 데이터가 아예 없는 경우 반환되는 에러\n   */ async send(messages, requestConfigParameter) {\n        const payload = [];\n        if (Array.isArray(messages)) messages.forEach((value)=>{\n            payload.push(new (0, $27af694b436994e7$export$f69c19e57285b83a)(value));\n        });\n        else if (!Array.isArray(messages)) payload.push(new (0, $27af694b436994e7$export$f69c19e57285b83a)(messages));\n        else throw new (0, $d52a8906032dc4a4$export$6bfa95453d427b2b)(\"\\uC798\\uBABB\\uB41C \\uAC12\\uC774 \\uC785\\uB825\\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4.\");\n        if (payload.length === 0) throw new (0, $d52a8906032dc4a4$export$6bfa95453d427b2b)(\"\\uB370\\uC774\\uD130\\uAC00 \\uBC18\\uB4DC\\uC2DC 1\\uAC74 \\uC774\\uC0C1 \\uAE30\\uC785\\uB418\\uC5B4 \\uC788\\uC5B4\\uC57C \\uD569\\uB2C8\\uB2E4.\");\n        const parameter = new (0, $5a82f42370a799c2$export$c4f11270a1f4daf1)(payload, requestConfigParameter?.allowDuplicates, requestConfigParameter?.appId, requestConfigParameter?.scheduledDate, requestConfigParameter?.showMessageList);\n        const requestConfig = {\n            method: 'POST',\n            url: `${this.baseUrl}/messages/v4/send-many/detail`\n        };\n        return (0, $8e16545f15d59ac0$export$2e2bcd8739ae039)(this.authInfo, requestConfig, parameter).then((res)=>{\n            const count = res.groupInfo.count;\n            if (res.failedMessageList.length > 0 && count.total === count.registeredFailed) throw new (0, $d52a8906032dc4a4$export$b75729dbe9bbac3a)(res.failedMessageList);\n            return res;\n        });\n    }\n    /**\n   * 단일 메시지 발송 기능\n   * @param message 메시지(문자, 알림톡 등)\n   * @param appId appstore용 app id\n   */ async sendOne(message, appId) {\n        const parameter = new (0, $5a82f42370a799c2$export$ad3dca884a810e33)(message, false, appId);\n        const requestConfig = {\n            method: 'POST',\n            url: `${this.baseUrl}/messages/v4/send`\n        };\n        return (0, $8e16545f15d59ac0$export$2e2bcd8739ae039)(this.authInfo, requestConfig, parameter);\n    }\n    /**\n   * 단일 메시지 예약 발송 기능\n   * @deprecated 해당 함수는 더이상 지원하지 않습니다, send 메소드를 사용하세요!\n   * @param message 메시지(문자, 알림톡 등)\n   * @param scheduledDate 예약일시\n   */ async sendOneFuture(message, scheduledDate) {\n        const groupId = await this.createGroup();\n        await this.addMessagesToGroup(groupId, [\n            message\n        ]);\n        scheduledDate = (0, $66c26f4d178df746$export$2e2bcd8739ae039)(scheduledDate);\n        return this.reserveGroup(groupId, scheduledDate);\n    }\n    /**\n   * 그룹 생성\n   * @param allowDuplicates 생성할 그룹이 중복 수신번호를 허용하는지 여부를 확인합니다.\n   * @param appId 생성할 그룹에 특정 appId를 넣을 수 있습니다.\n   * @param customFields 생성할 그룹에 사용자 정의 데이터를 Record 형태로 삽입할 수 있습니다.\n   */ async createGroup(allowDuplicates, appId, customFields) {\n        allowDuplicates = allowDuplicates ?? false;\n        const { sdkVersion: sdkVersion, osPlatform: osPlatform } = (0, $5a82f42370a799c2$export$fb47e5c0b633ea53);\n        const requestConfig = {\n            method: 'POST',\n            url: `${this.baseUrl}/messages/v4/groups`\n        };\n        return (0, $8e16545f15d59ac0$export$2e2bcd8739ae039)(this.authInfo, requestConfig, {\n            sdkVersion: sdkVersion,\n            osPlatform: osPlatform,\n            allowDuplicates: allowDuplicates,\n            appId: appId,\n            customFields: customFields\n        }).then((res)=>res.groupId);\n    }\n    /**\n   * 그룹 메시지 추가\n   * 한번 요청으로 최대 10,000건의 메시지를 추가할 수 있습니다.\n   * 추가 가능한 최대 메시지 건 수는 1,000,000건 입니다.\n   * @param groupId 생성 된 Group ID\n   * @param messages 여러 메시지(문자, 알림톡 등)\n   */ async addMessagesToGroup(groupId, messages) {\n        const requestConfig = {\n            method: 'PUT',\n            url: `${this.baseUrl}/messages/v4/groups/${groupId}/messages`\n        };\n        return (0, $8e16545f15d59ac0$export$2e2bcd8739ae039)(this.authInfo, requestConfig, new (0, $5a82f42370a799c2$export$6ba9c27a351bdec2)(messages));\n    }\n    /**\n   * 그룹 메시지 전송 요청\n   * @param groupId 생성 된 Group ID\n   */ async sendGroup(groupId) {\n        const requestConfig = {\n            method: 'POST',\n            url: `${this.baseUrl}/messages/v4/groups/${groupId}/send`\n        };\n        return (0, $8e16545f15d59ac0$export$2e2bcd8739ae039)(this.authInfo, requestConfig);\n    }\n    /**\n   * 그룹 예약 발송 설정\n   * @param groupId 생성 된 Group ID\n   * @param scheduledDate 예약발송 할 날짜\n   */ async reserveGroup(groupId, scheduledDate) {\n        const requestConfig = {\n            method: 'POST',\n            url: `${this.baseUrl}/messages/v4/groups/${groupId}/schedule`\n        };\n        const formattedScheduledDate = (0, $7WnbQ$formatISO)(scheduledDate);\n        return (0, $8e16545f15d59ac0$export$2e2bcd8739ae039)(this.authInfo, requestConfig, {\n            scheduledDate: formattedScheduledDate\n        });\n    }\n    /**\n   * 단일 그룹정보 조회\n   * @param groupId 그룹 ID\n   */ async getGroup(groupId) {\n        const requestConfig = {\n            method: 'GET',\n            url: `${this.baseUrl}/messages/v4/groups/${groupId}`\n        };\n        return (0, $8e16545f15d59ac0$export$2e2bcd8739ae039)(this.authInfo, requestConfig);\n    }\n    /**\n   * 그룹 목록 정보 조회\n   * @param data 그룹 정보 상세 조회용 request 데이터\n   */ async getGroups(data) {\n        let payload = {};\n        if (data) payload = new (0, $40788678671ec46e$export$7d6fa05e85a55793)(data);\n        const parameter = (0, $7WnbQ$qs).stringify(payload, {\n            indices: false,\n            addQueryPrefix: true\n        });\n        const endpoint = `${this.baseUrl}/messages/v4/groups${parameter}`;\n        const requestConfig = {\n            method: 'GET',\n            url: endpoint\n        };\n        return (0, $8e16545f15d59ac0$export$2e2bcd8739ae039)(this.authInfo, requestConfig);\n    }\n    /**\n   * 그룹 내 메시지 목록 조회\n   * @param groupId 생성 된 Group ID\n   * @param data startkey, limit 등 쿼리 조건 파라미터\n   */ async getGroupMessages(groupId, data) {\n        const parameter = (0, $7WnbQ$qs).stringify(data, {\n            indices: false,\n            addQueryPrefix: true\n        });\n        const endpoint = `${this.baseUrl}/messages/v4/groups/${groupId}/messages${parameter}`;\n        const requestConfig = {\n            method: 'GET',\n            url: endpoint\n        };\n        return (0, $8e16545f15d59ac0$export$2e2bcd8739ae039)(this.authInfo, requestConfig);\n    }\n    /**\n   * 그룹 내 특정 메시지 삭제\n   * @param groupId 생성 된 Group Id\n   * @param messageIds 생성 된 메시지 ID 목록\n   */ async removeGroupMessages(groupId, messageIds) {\n        const requestConfig = {\n            method: 'DELETE',\n            url: `${this.baseUrl}/messages/v4/groups/${groupId}/messages`\n        };\n        return (0, $8e16545f15d59ac0$export$2e2bcd8739ae039)(this.authInfo, requestConfig, {\n            messageIds: messageIds\n        });\n    }\n    /**\n   * 그룹 내 예약 발송 취소(메시지 실패 전체 처리 됨)\n   * @param groupId 생성 된 Group ID\n   */ async removeReservationToGroup(groupId) {\n        const requestConfig = {\n            method: 'DELETE',\n            url: `${this.baseUrl}/messages/v4/groups/${groupId}/schedule`\n        };\n        return (0, $8e16545f15d59ac0$export$2e2bcd8739ae039)(this.authInfo, requestConfig);\n    }\n    /**\n   * 그룹 삭제\n   * @param groupId\n   */ async removeGroup(groupId) {\n        const requestConfig = {\n            method: 'DELETE',\n            url: `${this.baseUrl}/messages/v4/groups/${groupId}`\n        };\n        return (0, $8e16545f15d59ac0$export$2e2bcd8739ae039)(this.authInfo, requestConfig);\n    }\n    /**\n   * 메시지 목록 조회\n   * @param data 목록 조회 상세조건 파라미터\n   */ async getMessages(data) {\n        let payload = {};\n        if (data) payload = new (0, $f311dcba24d92cc0$export$18a889443adf01a3)(data);\n        const parameter = (0, $7WnbQ$qs).stringify(payload, {\n            indices: false,\n            addQueryPrefix: true\n        });\n        const endpoint = `${this.baseUrl}/messages/v4/list${parameter}`;\n        const requestConfig = {\n            method: 'GET',\n            url: endpoint\n        };\n        return (0, $8e16545f15d59ac0$export$2e2bcd8739ae039)(this.authInfo, requestConfig);\n    }\n    /**\n   * 통계 조회\n   * @param data 통계 상세 조건 파라미터\n   * @returns GetStatisticsResponse 통계 결과\n   */ async getStatistics(data) {\n        let payload = {};\n        if (data) payload = new (0, $314d4b5bf783a3ae$export$bc0a97822f19395c)(data);\n        const parameter = (0, $7WnbQ$qs).stringify(payload, {\n            indices: false,\n            addQueryPrefix: true\n        });\n        const endpoint = `${this.baseUrl}/messages/v4/statistics${parameter}`;\n        const requestConfig = {\n            method: 'GET',\n            url: endpoint\n        };\n        return (0, $8e16545f15d59ac0$export$2e2bcd8739ae039)(this.authInfo, requestConfig);\n    }\n    /**\n   * 잔액조회\n   * @returns GetBalanceResponse\n   */ async getBalance() {\n        const requestConfig = {\n            method: 'GET',\n            url: `${this.baseUrl}/cash/v1/balance`\n        };\n        const response = await (0, $8e16545f15d59ac0$export$2e2bcd8739ae039)(this.authInfo, requestConfig);\n        return {\n            balance: response.balance,\n            point: response.point\n        };\n    }\n    /**\n   * 파일(이미지) 업로드\n   * 카카오 친구톡 이미지는 500kb, MMS는 200kb, 발신번호 서류 인증용 파일은 2mb의 제한이 있음\n   * @param filePath 해당 파일의 경로 또는 접근 가능한 이미지 URL\n   * @param fileType 저장할 파일의 유형, 예) 카카오 친구톡 용 이미지 -> KAKAO, MMS용 사진 -> MMS, 발신번호 서류 인증에 쓰이는 문서 등 -> DOCUMENT, RCS 이미지 -> RCS\n   * @param name 파일 이름\n   * @param link 파일 링크, 친구톡의 경우 필수 값\n   */ async uploadFile(filePath, fileType, name, link) {\n        const encodedFile = await (0, $7WnbQ$imagetobase64)(filePath);\n        const requestConfig = {\n            method: 'POST',\n            url: `${this.baseUrl}/storage/v1/files`\n        };\n        const parameter = {\n            file: encodedFile,\n            type: fileType,\n            name: name,\n            link: link\n        };\n        return (0, $8e16545f15d59ac0$export$2e2bcd8739ae039)(this.authInfo, requestConfig, parameter);\n    }\n    /**\n   * 카카오 채널 카테고리 조회\n   */ async getKakaoChannelCategories() {\n        const requestConfig = {\n            method: 'GET',\n            url: `${this.baseUrl}/kakao/v2/channels/categories`\n        };\n        return (0, $8e16545f15d59ac0$export$2e2bcd8739ae039)(this.authInfo, requestConfig);\n    }\n    /**\n   * 카카오 채널 목록 조회\n   * @param data 카카오 채널 목록을 더 자세하게 조회할 때 필요한 파라미터\n   */ async getKakaoChannels(data) {\n        let payload = {};\n        if (data) payload = new (0, $a9079e4564020ba4$export$28223677cbfc90e7)(data);\n        const parameter = (0, $7WnbQ$qs).stringify(payload, {\n            indices: false\n        });\n        const endpoint = `${this.baseUrl}/kakao/v2/channels?${parameter}`;\n        const requestConfig = {\n            method: 'GET',\n            url: endpoint\n        };\n        const response = await (0, $8e16545f15d59ac0$export$2e2bcd8739ae039)(this.authInfo, requestConfig);\n        const channelList = new Array();\n        for (const channel of response.channelList)channelList.push(new (0, $35853283150d7335$export$4ec3af33017d2d92)(channel));\n        return {\n            limit: response.limit,\n            nextKey: response.nextKey,\n            startKey: response.startKey,\n            channelList: channelList\n        };\n    }\n    /**\n   * @description 카카오 채널 조회\n   * @param channelId 카카오 채널 ID(구 pfId)\n   */ async getKakaoChannel(channelId) {\n        const requestConfig = {\n            method: 'GET',\n            url: `${this.baseUrl}/kakao/v2/channels/${channelId}`\n        };\n        const response = await (0, $8e16545f15d59ac0$export$2e2bcd8739ae039)(this.authInfo, requestConfig);\n        return new (0, $35853283150d7335$export$4ec3af33017d2d92)(response);\n    }\n    /**\n   * @description 카카오 채널 연동을 위한 인증 토큰 요청\n   */ async requestKakaoChannelToken(data) {\n        const requestConfig = {\n            method: 'POST',\n            url: `${this.baseUrl}/kakao/v2/channels/token`\n        };\n        return (0, $8e16545f15d59ac0$export$2e2bcd8739ae039)(this.authInfo, requestConfig, data);\n    }\n    /**\n   * @description 카카오 채널 연동 메소드\n   * getKakaoChannelCategories, requestKakaoChannelToken 메소드를 선행적으로 호출해야 합니다!\n   */ async createKakaoChannel(data) {\n        const requestConfig = {\n            method: 'POST',\n            url: `${this.baseUrl}/kakao/v2/channels`\n        };\n        return (0, $8e16545f15d59ac0$export$2e2bcd8739ae039)(this.authInfo, requestConfig, data);\n    }\n    /**\n   * @description 카카오 채널 삭제, 채널이 삭제 될 경우 해당 채널의 템플릿이 모두 삭제됩니다!\n   * @param channelId 카카오 채널 ID\n   */ async removeKakaoChannel(channelId) {\n        const requestConfig = {\n            method: 'DELETE',\n            url: `${this.baseUrl}/kakao/v2/channels/${channelId}`\n        };\n        return (0, $8e16545f15d59ac0$export$2e2bcd8739ae039)(this.authInfo, requestConfig);\n    }\n    /**\n   * 카카오 템플릿 목록 조회\n   * @param data 카카오 템플릿 목록을 더 자세하게 조회할 때 필요한 파라미터\n   */ async getKakaoAlimtalkTemplates(data) {\n        let payload = {};\n        if (data) payload = new (0, $34cc2bc2228ab247$export$91fde5f4988e5a2)(data);\n        const parameter = (0, $7WnbQ$qs).stringify(payload, {\n            indices: false\n        });\n        const endpoint = `${this.baseUrl}/kakao/v2/templates?${parameter}`;\n        const requestConfig = {\n            method: 'GET',\n            url: endpoint\n        };\n        const response = await (0, $8e16545f15d59ac0$export$2e2bcd8739ae039)(this.authInfo, requestConfig);\n        const templateList = new Array();\n        for (const template of response.templateList)templateList.push(new (0, $7484651a5b4bc2a1$export$16a18a4d633c3913)(template));\n        return {\n            limit: response.limit,\n            nextKey: response.nextKey,\n            startKey: response.startKey,\n            templateList: templateList\n        };\n    }\n    /**\n   * 카카오 템플릿 상세 조회\n   * @param templateId 카카오 알림톡 템플릿 ID\n   */ async getKakaoAlimtalkTemplate(templateId) {\n        const requestConfig = {\n            method: 'GET',\n            url: `${this.baseUrl}/kakao/v2/templates/${templateId}`\n        };\n        const response = await (0, $8e16545f15d59ac0$export$2e2bcd8739ae039)(this.authInfo, requestConfig);\n        return new (0, $7484651a5b4bc2a1$export$16a18a4d633c3913)(response);\n    }\n    /**\n   * 카카오 템플릿 카테고리 조회\n   */ async getKakaoAlimtalkTemplateCategories() {\n        const requestConfig = {\n            method: 'GET',\n            url: `${this.baseUrl}/kakao/v2/templates/categories`\n        };\n        return (0, $8e16545f15d59ac0$export$2e2bcd8739ae039)(this.authInfo, requestConfig);\n    }\n    /**\n   * @description 카카오 알림톡 템플릿 생성\n   * 반드시 getKakaoAlimtalkTemplateCategories를 먼저 호출하여 카테고리 값을 확인해야 합니다!\n   * @param data 알림톡 템플릿 생성을 위한 파라미터\n   */ async createKakaoAlimtalkTemplate(data) {\n        const requestConfig = {\n            method: 'POST',\n            url: `${this.baseUrl}/kakao/v2/templates`\n        };\n        const response = await (0, $8e16545f15d59ac0$export$2e2bcd8739ae039)(this.authInfo, requestConfig, data);\n        return new (0, $7484651a5b4bc2a1$export$16a18a4d633c3913)(response);\n    }\n    /**\n   * 카카오 알림톡 템플릿 검수 요청\n   * @param templateId 카카오 알림톡 템플릿 ID\n   */ async requestInspectionKakaoAlimtalkTemplate(templateId) {\n        const requestConfig = {\n            method: 'PUT',\n            url: `${this.baseUrl}/kakao/v2/templates/${templateId}/inspection`\n        };\n        const response = await (0, $8e16545f15d59ac0$export$2e2bcd8739ae039)(this.authInfo, requestConfig);\n        return new (0, $7484651a5b4bc2a1$export$16a18a4d633c3913)(response);\n    }\n    /**\n   * 카카오 알림톡 템플릿 검수 취소 요청\n   * @param templateId 카카오 알림톡 템플릿 ID\n   */ async cancelInspectionKakaoAlimtalkTemplate(templateId) {\n        const requestConfig = {\n            method: 'PUT',\n            url: `${this.baseUrl}/kakao/v2/templates/${templateId}/inspection/cancel`\n        };\n        const response = await (0, $8e16545f15d59ac0$export$2e2bcd8739ae039)(this.authInfo, requestConfig);\n        return new (0, $7484651a5b4bc2a1$export$16a18a4d633c3913)(response);\n    }\n    /**\n   * 카카오 알림톡 템플릿 수정(검수 X)\n   * @param templateId 카카오 알림톡 템플릿 ID\n   * @param data 카카오 알림톡 템플릿 수정을 위한 파라미터\n   */ async updateKakaoAlimtalkTemplate(templateId, data) {\n        const requestConfig = {\n            method: 'PUT',\n            url: `${this.baseUrl}/kakao/v2/templates/${templateId}`\n        };\n        const response = await (0, $8e16545f15d59ac0$export$2e2bcd8739ae039)(this.authInfo, requestConfig, data);\n        return new (0, $7484651a5b4bc2a1$export$16a18a4d633c3913)(response);\n    }\n    /**\n   * 카카오 알림톡 템플릿 이름 수정(검수 상태 상관없이 변경가능)\n   * @param templateId 카카오 알림톡 템플릿 ID\n   * @param name 카카오 알림톡 템플릿 이름 변경을 위한 파라미터\n   */ async updateKakaoAlimtalkTemplateName(templateId, name) {\n        const requestConfig = {\n            method: 'PUT',\n            url: `${this.baseUrl}/kakao/v2/templates/${templateId}/name`\n        };\n        const response = await (0, $8e16545f15d59ac0$export$2e2bcd8739ae039)(this.authInfo, requestConfig, {\n            name: name\n        });\n        return new (0, $7484651a5b4bc2a1$export$16a18a4d633c3913)(response);\n    }\n    /**\n   * @deprecated 해당 메소드는 더이상 사용되지 않습니다. removeKakaoAlimtalkTemplate를 이용해주세요!\n   * 카카오 알림톡 템플릿 삭제(대기, 반려 상태일 때만 삭제가능)\n   * @param templateId 카카오 알림톡 템플릿 ID\n   */ async deleteKakaoAlimtalkTemplate(templateId) {\n        return this.removeKakaoAlimtalkTemplate(templateId);\n    }\n    /**\n   * 카카오 알림톡 템플릿 삭제(대기, 반려 상태일 때만 삭제가능)\n   * @param templateId 카카오 알림톡 템플릿 ID\n   */ async removeKakaoAlimtalkTemplate(templateId) {\n        const requestConfig = {\n            method: 'DELETE',\n            url: `${this.baseUrl}/kakao/v2/templates/${templateId}`\n        };\n        const response = await (0, $8e16545f15d59ac0$export$2e2bcd8739ae039)(this.authInfo, requestConfig);\n        return new (0, $7484651a5b4bc2a1$export$16a18a4d633c3913)(response);\n    }\n    /**\n   * 080 수신 거부 조회\n   * @param data 080 수신 거부 상세 조회용 request 데이터\n   * @returns GetBlacksResponse\n   */ async getBlacks(data) {\n        let payload = {\n            type: 'DENIAL'\n        };\n        if (data) payload = new (0, $f227b10eb7f29df4$export$a03fd6f891b485aa)(data);\n        const parameter = (0, $7WnbQ$qs).stringify(payload, {\n            indices: false,\n            addQueryPrefix: true\n        });\n        const endpoint = `${this.baseUrl}/iam/v1/black${parameter}`;\n        const requestConfig = {\n            method: 'GET',\n            url: endpoint\n        };\n        return (0, $8e16545f15d59ac0$export$2e2bcd8739ae039)(this.authInfo, requestConfig);\n    }\n    /**\n   * 수신 거부 그룹 조회\n   * @param data 수신 거부 그룹 조회용 request 데이터\n   * @returns GetBlockGroupsResponse\n   */ async getBlockGroups(data) {\n        let payload = {};\n        if (data) payload = new (0, $8116b601679486db$export$e63e46a11fc5d3c)(data);\n        const parameter = (0, $7WnbQ$qs).stringify(payload, {\n            indices: false,\n            addQueryPrefix: true\n        });\n        const endpoint = `${this.baseUrl}/iam/v1/block/groups${parameter}`;\n        const requestConfig = {\n            method: 'GET',\n            url: endpoint\n        };\n        return (0, $8e16545f15d59ac0$export$2e2bcd8739ae039)(this.authInfo, requestConfig);\n    }\n    /**\n   * 수신 차단 그룹 별 수신번호 조회\n   * @param data 수신 거부 그룹 별 수신번호 조회용 request 데이터\n   * @returns GetBlockNumbersResponse\n   */ async getBlockNumbers(data) {\n        let payload = {};\n        if (data) payload = new (0, $a230e645f76924d3$export$df706d57151d1b78)(data);\n        const parameter = (0, $7WnbQ$qs).stringify(payload, {\n            indices: false,\n            addQueryPrefix: true\n        });\n        const endpoint = `${this.baseUrl}/iam/v1/block/numbers${parameter}`;\n        const requestConfig = {\n            method: 'GET',\n            url: endpoint\n        };\n        return (0, $8e16545f15d59ac0$export$2e2bcd8739ae039)(this.authInfo, requestConfig);\n    }\n}\n\n\nexport {$9377f5ff7761f7c6$export$34e7265c65c60ffd as SolapiMessageService, $d52a8906032dc4a4$export$7522646e65a7a5d1 as InvalidDateError, $d52a8906032dc4a4$export$6efc4418efdbd5bb as ApiKeyError, $d52a8906032dc4a4$export$c73ca302efeda3b4 as DefaultError, $d52a8906032dc4a4$export$b75729dbe9bbac3a as MessageNotReceivedError, $d52a8906032dc4a4$export$6bfa95453d427b2b as BadRequestError};\n//# sourceMappingURL=index.mjs.map\n","import {Message} from './models/message';\nimport {\n  CreateGroupRequest,\n  CreateKakaoChannelRequest,\n  CreateKakaoChannelTokenRequest,\n  defaultAgent,\n  FileType,\n  FileUploadRequest,\n  GetGroupMessagesRequest,\n  GroupMessageAddRequest,\n  MessageParameter,\n  MultipleDetailMessageSendingRequest,\n  RemoveMessageIdsToGroupRequest,\n  RequestConfig,\n  ScheduledDateSendingRequest,\n  SingleMessageSendingRequest,\n} from './requests/messageRequest';\nimport defaultFetcher from './lib/defaultFetcher';\nimport {\n  AddMessageResponse,\n  CreateKakaoChannelResponse,\n  FileUploadResponse,\n  GetBalanceResponse,\n  GetGroupsResponse,\n  GetMessagesResponse,\n  GetStatisticsResponse,\n  GroupMessageResponse,\n  RemoveGroupMessagesResponse,\n  RequestKakaoChannelTokenResponse,\n  SingleMessageSentResponse,\n} from './responses/messageResponses';\nimport {GetBlacksResponse} from './responses/iam/getBlacksResponse';\nimport {GetBlockGroupsResponse} from './responses/iam/getBlockGroupsResponse';\nimport {GetBlockNumbersResponse} from './responses/iam/getBlockNumbersResponse';\nimport {GroupId} from './types/commonTypes';\nimport {formatISO} from 'date-fns';\nimport ImageToBase64 from 'image-to-base64';\nimport stringDateTransfer from './lib/stringDateTrasnfer';\nimport {BadRequestError, MessageNotReceivedError} from './errors/defaultError';\nimport {\n  KakaoChannel,\n  KakaoChannelCategory,\n  KakaoChannelInterface,\n} from './models/kakao/kakaoChannel';\nimport {\n  KakaoAlimtalkTemplate,\n  KakaoAlimtalkTemplateCategory,\n  KakaoAlimtalkTemplateInterface,\n} from './models/kakao/kakaoAlimtalkTemplate';\nimport qs from 'qs';\nimport {SendRequestConfig} from './requests/sendRequestConfig';\nimport {DetailGroupMessageResponse} from './responses/sendManyDetailResponse';\nimport {GetKakaoTemplateResponse} from './responses/kakao/getKakaoTemplateResponse';\nimport {\n  GetKakaoAlimtalkTemplatesFinalizeResponse,\n  GetKakaoAlimtalkTemplatesResponse,\n} from './responses/kakao/getKakaoAlimtalkTemplatesResponse';\nimport {\n  GetKakaoAlimtalkTemplatesFinalizeRequest,\n  GetKakaoAlimtalkTemplatesRequest,\n} from './requests/kakao/getKakaoAlimtalkTemplatesRequest';\nimport {\n  GetKakaoChannelsFinalizeRequest,\n  GetKakaoChannelsRequest,\n} from './requests/kakao/getKakaoChannelsRequest';\nimport {\n  GetKakaoChannelsFinalizeResponse,\n  GetKakaoChannelsResponse,\n} from './responses/kakao/getKakaoChannelsResponse';\nimport {CreateKakaoAlimtalkTemplateRequest} from './requests/kakao/createKakaoAlimtalkTemplateRequest';\nimport {UpdateKakaoAlimtalkTemplateRequest} from './requests/kakao/updateKakaoAlimtalkTemplateRequest';\nimport {\n  GetGroupsFinalizeRequest,\n  GetGroupsRequest,\n} from './requests/messages/groups/getGroupsRequest';\nimport {\n  GetBlacksFinalizeRequest,\n  GetBlacksRequest,\n} from './requests/iam/getBlacksRequest';\nimport {\n  GetBlockGroupsFinalizeRequest,\n  GetBlockGroupsRequest,\n} from './requests/iam/getBlockGroupsRequest';\nimport {\n  GetBlockNumbersFinalizeRequest,\n  GetBlockNumbersRequest,\n} from './requests/iam/getBlockNumbersRequest';\nimport {\n  GetMessagesRequest,\n  GetMessagesFinalizeRequest,\n} from './requests/messages/getMessagesRequest';\nimport {\n  GetStatisticsFinalizeRequest,\n  GetStatisticsRequest,\n} from './requests/messages/statistics/getStatisticsRequest';\n\nexport * from './errors/defaultError';\n\n/**\n * SOLAPI 메시지 서비스\n * 발송 및 조회 등 SOLAPI에서 제공되는 여러 API의 기능을 쉽게 사용할 수 있습니다.\n * SOLAPI 자체의 서비스에 관한 사항은 SOLAPI 홈페이지를 참고해주세요.\n * @see https://solapi.github.io/solapi-nodejs\n * @see https://developers.solapi.com/category/nodejs\n */\nexport class SolapiMessageService {\n  private readonly baseUrl = 'https://api.solapi.com';\n  private readonly authInfo: {\n    apiKey: string;\n    apiSecret: string;\n  };\n\n  constructor(apiKey: string, apiSecret: string) {\n    this.authInfo = {\n      apiKey,\n      apiSecret,\n    };\n  }\n\n  /**\n   * 메시지 발송 기능, sendMany 함수보다 개선된 오류 표시 기능등을 제공합니다.\n   * 한번의 요청으로 최대 10,000건까지 발송할 수 있습니다.\n   * @param messages 발송 요청할 메시지 파라미터(문자, 알림톡 등)\n   * @param requestConfigParameter request시 필요한 파라미터 오브젝트\n   * @throws MessageNotReceivedError 모든 메시지 접수건이 실패건으로 진행되는 경우 반환되는 에러\n   * @throws BadRequestError 잘못된 파라미터를 기입했거나, 데이터가 아예 없는 경우 반환되는 에러\n   */\n  async send(\n    messages: MessageParameter | Array<MessageParameter>,\n    requestConfigParameter?: SendRequestConfig,\n  ): Promise<DetailGroupMessageResponse> {\n    const payload: Array<Message> = [];\n    if (Array.isArray(messages)) {\n      messages.forEach(value => {\n        payload.push(new Message(value));\n      });\n    } else if (!Array.isArray(messages)) {\n      payload.push(new Message(messages));\n    } else {\n      throw new BadRequestError('잘못된 값이 입력되었습니다.');\n    }\n    if (payload.length === 0) {\n      throw new BadRequestError(\n        '데이터가 반드시 1건 이상 기입되어 있어야 합니다.',\n      );\n    }\n    const parameter = new MultipleDetailMessageSendingRequest(\n      payload,\n      requestConfigParameter?.allowDuplicates,\n      requestConfigParameter?.appId,\n      requestConfigParameter?.scheduledDate,\n      requestConfigParameter?.showMessageList,\n    );\n    const requestConfig: RequestConfig = {\n      method: 'POST',\n      url: `${this.baseUrl}/messages/v4/send-many/detail`,\n    };\n    return defaultFetcher<\n      MultipleDetailMessageSendingRequest,\n      DetailGroupMessageResponse\n    >(this.authInfo, requestConfig, parameter).then(\n      (res: DetailGroupMessageResponse) => {\n        const count = res.groupInfo.count;\n        if (\n          res.failedMessageList.length > 0 &&\n          count.total === count.registeredFailed\n        ) {\n          throw new MessageNotReceivedError(res.failedMessageList);\n        }\n        return res;\n      },\n    );\n  }\n\n  /**\n   * 단일 메시지 발송 기능\n   * @param message 메시지(문자, 알림톡 등)\n   * @param appId appstore용 app id\n   */\n  async sendOne(\n    message: Message,\n    appId?: string,\n  ): Promise<SingleMessageSentResponse> {\n    const parameter = new SingleMessageSendingRequest(message, false, appId);\n    const requestConfig: RequestConfig = {\n      method: 'POST',\n      url: `${this.baseUrl}/messages/v4/send`,\n    };\n    return defaultFetcher<\n      SingleMessageSendingRequest,\n      SingleMessageSentResponse\n    >(this.authInfo, requestConfig, parameter);\n  }\n\n  /**\n   * 단일 메시지 예약 발송 기능\n   * @deprecated 해당 함수는 더이상 지원하지 않습니다, send 메소드를 사용하세요!\n   * @param message 메시지(문자, 알림톡 등)\n   * @param scheduledDate 예약일시\n   */\n  async sendOneFuture(\n    message: Message,\n    scheduledDate: string | Date,\n  ): Promise<GroupMessageResponse> {\n    const groupId = await this.createGroup();\n    await this.addMessagesToGroup(groupId, [message]);\n    scheduledDate = stringDateTransfer(scheduledDate);\n    return this.reserveGroup(groupId, scheduledDate);\n  }\n\n  /**\n   * 그룹 생성\n   * @param allowDuplicates 생성할 그룹이 중복 수신번호를 허용하는지 여부를 확인합니다.\n   * @param appId 생성할 그룹에 특정 appId를 넣을 수 있습니다.\n   * @param customFields 생성할 그룹에 사용자 정의 데이터를 Record 형태로 삽입할 수 있습니다.\n   */\n  async createGroup(\n    allowDuplicates?: boolean,\n    appId?: string,\n    customFields?: Record<string, string>,\n  ): Promise<GroupId> {\n    allowDuplicates = allowDuplicates ?? false;\n    const {sdkVersion, osPlatform} = defaultAgent;\n    const requestConfig: RequestConfig = {\n      method: 'POST',\n      url: `${this.baseUrl}/messages/v4/groups`,\n    };\n    return defaultFetcher<CreateGroupRequest, GroupMessageResponse>(\n      this.authInfo,\n      requestConfig,\n      {\n        sdkVersion,\n        osPlatform,\n        allowDuplicates,\n        appId,\n        customFields,\n      },\n    ).then(res => res.groupId);\n  }\n\n  /**\n   * 그룹 메시지 추가\n   * 한번 요청으로 최대 10,000건의 메시지를 추가할 수 있습니다.\n   * 추가 가능한 최대 메시지 건 수는 1,000,000건 입니다.\n   * @param groupId 생성 된 Group ID\n   * @param messages 여러 메시지(문자, 알림톡 등)\n   */\n  async addMessagesToGroup(\n    groupId: GroupId,\n    messages: Required<Array<Message>>,\n  ): Promise<AddMessageResponse> {\n    const requestConfig: RequestConfig = {\n      method: 'PUT',\n      url: `${this.baseUrl}/messages/v4/groups/${groupId}/messages`,\n    };\n    return defaultFetcher<GroupMessageAddRequest, AddMessageResponse>(\n      this.authInfo,\n      requestConfig,\n      new GroupMessageAddRequest(messages),\n    );\n  }\n\n  /**\n   * 그룹 메시지 전송 요청\n   * @param groupId 생성 된 Group ID\n   */\n  async sendGroup(groupId: GroupId): Promise<GroupMessageResponse> {\n    const requestConfig: RequestConfig = {\n      method: 'POST',\n      url: `${this.baseUrl}/messages/v4/groups/${groupId}/send`,\n    };\n    return defaultFetcher<never, GroupMessageResponse>(\n      this.authInfo,\n      requestConfig,\n    );\n  }\n\n  /**\n   * 그룹 예약 발송 설정\n   * @param groupId 생성 된 Group ID\n   * @param scheduledDate 예약발송 할 날짜\n   */\n  async reserveGroup(groupId: GroupId, scheduledDate: Date) {\n    const requestConfig: RequestConfig = {\n      method: 'POST',\n      url: `${this.baseUrl}/messages/v4/groups/${groupId}/schedule`,\n    };\n    const formattedScheduledDate = formatISO(scheduledDate);\n    return defaultFetcher<ScheduledDateSendingRequest, GroupMessageResponse>(\n      this.authInfo,\n      requestConfig,\n      {\n        scheduledDate: formattedScheduledDate,\n      },\n    );\n  }\n\n  /**\n   * 단일 그룹정보 조회\n   * @param groupId 그룹 ID\n   */\n  async getGroup(groupId: GroupId): Promise<GroupMessageResponse> {\n    const requestConfig: RequestConfig = {\n      method: 'GET',\n      url: `${this.baseUrl}/messages/v4/groups/${groupId}`,\n    };\n    return defaultFetcher<never, GroupMessageResponse>(\n      this.authInfo,\n      requestConfig,\n    );\n  }\n\n  /**\n   * 그룹 목록 정보 조회\n   * @param data 그룹 정보 상세 조회용 request 데이터\n   */\n  async getGroups(data?: GetGroupsRequest) {\n    let payload: GetGroupsFinalizeRequest = {};\n    if (data) {\n      payload = new GetGroupsFinalizeRequest(data);\n    }\n    const parameter = qs.stringify(payload, {\n      indices: false,\n      addQueryPrefix: true,\n    });\n    const endpoint = `${this.baseUrl}/messages/v4/groups${parameter}`;\n    const requestConfig: RequestConfig = {\n      method: 'GET',\n      url: endpoint,\n    };\n    return defaultFetcher<never, GetGroupsResponse>(\n      this.authInfo,\n      requestConfig,\n    );\n  }\n\n  /**\n   * 그룹 내 메시지 목록 조회\n   * @param groupId 생성 된 Group ID\n   * @param data startkey, limit 등 쿼리 조건 파라미터\n   */\n  async getGroupMessages(\n    groupId: GroupId,\n    data?: GetGroupMessagesRequest,\n  ): Promise<GetMessagesResponse> {\n    const parameter = qs.stringify(data, {\n      indices: false,\n      addQueryPrefix: true,\n    });\n    const endpoint = `${this.baseUrl}/messages/v4/groups/${groupId}/messages${parameter}`;\n    const requestConfig: RequestConfig = {\n      method: 'GET',\n      url: endpoint,\n    };\n    return defaultFetcher<never, GetMessagesResponse>(\n      this.authInfo,\n      requestConfig,\n    );\n  }\n\n  /**\n   * 그룹 내 특정 메시지 삭제\n   * @param groupId 생성 된 Group Id\n   * @param messageIds 생성 된 메시지 ID 목록\n   */\n  async removeGroupMessages(\n    groupId: GroupId,\n    messageIds: Required<Array<string>>,\n  ): Promise<RemoveGroupMessagesResponse> {\n    const requestConfig: RequestConfig = {\n      method: 'DELETE',\n      url: `${this.baseUrl}/messages/v4/groups/${groupId}/messages`,\n    };\n    return defaultFetcher<\n      RemoveMessageIdsToGroupRequest,\n      RemoveGroupMessagesResponse\n    >(this.authInfo, requestConfig, {messageIds});\n  }\n\n  /**\n   * 그룹 내 예약 발송 취소(메시지 실패 전체 처리 됨)\n   * @param groupId 생성 된 Group ID\n   */\n  async removeReservationToGroup(\n    groupId: GroupId,\n  ): Promise<GroupMessageResponse> {\n    const requestConfig: RequestConfig = {\n      method: 'DELETE',\n      url: `${this.baseUrl}/messages/v4/groups/${groupId}/schedule`,\n    };\n    return defaultFetcher<never, GroupMessageResponse>(\n      this.authInfo,\n      requestConfig,\n    );\n  }\n\n  /**\n   * 그룹 삭제\n   * @param groupId\n   */\n  async removeGroup(groupId: GroupId) {\n    const requestConfig: RequestConfig = {\n      method: 'DELETE',\n      url: `${this.baseUrl}/messages/v4/groups/${groupId}`,\n    };\n    return defaultFetcher<never, GroupMessageResponse>(\n      this.authInfo,\n      requestConfig,\n    );\n  }\n\n  /**\n   * 메시지 목록 조회\n   * @param data 목록 조회 상세조건 파라미터\n   */\n  async getMessages(\n    data?: Readonly<GetMessagesRequest>,\n  ): Promise<GetMessagesResponse> {\n    let payload: GetMessagesFinalizeRequest = {};\n    if (data) {\n      payload = new GetMessagesFinalizeRequest(data);\n    }\n    const parameter = qs.stringify(payload, {\n      indices: false,\n      addQueryPrefix: true,\n    });\n    const endpoint = `${this.baseUrl}/messages/v4/list${parameter}`;\n    const requestConfig: RequestConfig = {\n      method: 'GET',\n      url: endpoint,\n    };\n    return defaultFetcher<never, GetMessagesResponse>(\n      this.authInfo,\n      requestConfig,\n    );\n  }\n\n  /**\n   * 통계 조회\n   * @param data 통계 상세 조건 파라미터\n   * @returns GetStatisticsResponse 통계 결과\n   */\n  async getStatistics(\n    data?: Readonly<GetStatisticsRequest>,\n  ): Promise<GetStatisticsResponse> {\n    let payload: GetStatisticsFinalizeRequest = {};\n    if (data) {\n      payload = new GetStatisticsFinalizeRequest(data);\n    }\n    const parameter = qs.stringify(payload, {\n      indices: false,\n      addQueryPrefix: true,\n    });\n    const endpoint = `${this.baseUrl}/messages/v4/statistics${parameter}`;\n    const requestConfig: RequestConfig = {\n      method: 'GET',\n      url: endpoint,\n    };\n    return defaultFetcher<never, GetStatisticsResponse>(\n      this.authInfo,\n      requestConfig,\n    );\n  }\n\n  /**\n   * 잔액조회\n   * @returns GetBalanceResponse\n   */\n  async getBalance(): Promise<GetBalanceResponse> {\n    const requestConfig: RequestConfig = {\n      method: 'GET',\n      url: `${this.baseUrl}/cash/v1/balance`,\n    };\n    const response = await defaultFetcher<never, GetBalanceResponse>(\n      this.authInfo,\n      requestConfig,\n    );\n    return {\n      balance: response.balance,\n      point: response.point,\n    };\n  }\n\n  /**\n   * 파일(이미지) 업로드\n   * 카카오 친구톡 이미지는 500kb, MMS는 200kb, 발신번호 서류 인증용 파일은 2mb의 제한이 있음\n   * @param filePath 해당 파일의 경로 또는 접근 가능한 이미지 URL\n   * @param fileType 저장할 파일의 유형, 예) 카카오 친구톡 용 이미지 -> KAKAO, MMS용 사진 -> MMS, 발신번호 서류 인증에 쓰이는 문서 등 -> DOCUMENT, RCS 이미지 -> RCS\n   * @param name 파일 이름\n   * @param link 파일 링크, 친구톡의 경우 필수 값\n   */\n  async uploadFile(\n    filePath: string,\n    fileType: FileType,\n    name?: string,\n    link?: string,\n  ): Promise<FileUploadResponse> {\n    const encodedFile = await ImageToBase64(filePath);\n    const requestConfig: RequestConfig = {\n      method: 'POST',\n      url: `${this.baseUrl}/storage/v1/files`,\n    };\n    const parameter: FileUploadRequest = {\n      file: encodedFile,\n      type: fileType,\n      name,\n      link,\n    };\n    return defaultFetcher<FileUploadRequest, FileUploadResponse>(\n      this.authInfo,\n      requestConfig,\n      parameter,\n    );\n  }\n\n  /**\n   * 카카오 채널 카테고리 조회\n   */\n  async getKakaoChannelCategories(): Promise<Array<KakaoChannelCategory>> {\n    const requestConfig: RequestConfig = {\n      method: 'GET',\n      url: `${this.baseUrl}/kakao/v2/channels/categories`,\n    };\n    return defaultFetcher<never, Array<KakaoChannelCategory>>(\n      this.authInfo,\n      requestConfig,\n    );\n  }\n\n  /**\n   * 카카오 채널 목록 조회\n   * @param data 카카오 채널 목록을 더 자세하게 조회할 때 필요한 파라미터\n   */\n  async getKakaoChannels(\n    data?: GetKakaoChannelsRequest,\n  ): Promise<GetKakaoChannelsFinalizeResponse> {\n    let payload: GetKakaoChannelsFinalizeRequest = {};\n    if (data) {\n      payload = new GetKakaoChannelsFinalizeRequest(data);\n    }\n    const parameter = qs.stringify(payload, {indices: false});\n    const endpoint = `${this.baseUrl}/kakao/v2/channels?${parameter}`;\n    const requestConfig: RequestConfig = {\n      method: 'GET',\n      url: endpoint,\n    };\n    const response = await defaultFetcher<never, GetKakaoChannelsResponse>(\n      this.authInfo,\n      requestConfig,\n    );\n    const channelList = new Array<KakaoChannel>();\n    for (const channel of response.channelList) {\n      channelList.push(new KakaoChannel(channel));\n    }\n    return {\n      limit: response.limit,\n      nextKey: response.nextKey,\n      startKey: response.startKey,\n      channelList,\n    };\n  }\n\n  /**\n   * @description 카카오 채널 조회\n   * @param channelId 카카오 채널 ID(구 pfId)\n   */\n  async getKakaoChannel(channelId: string): Promise<KakaoChannel> {\n    const requestConfig: RequestConfig = {\n      method: 'GET',\n      url: `${this.baseUrl}/kakao/v2/channels/${channelId}`,\n    };\n    const response = await defaultFetcher<never, KakaoChannelInterface>(\n      this.authInfo,\n      requestConfig,\n    );\n    return new KakaoChannel(response);\n  }\n\n  /**\n   * @description 카카오 채널 연동을 위한 인증 토큰 요청\n   */\n  async requestKakaoChannelToken(\n    data: CreateKakaoChannelTokenRequest,\n  ): Promise<RequestKakaoChannelTokenResponse> {\n    const requestConfig: RequestConfig = {\n      method: 'POST',\n      url: `${this.baseUrl}/kakao/v2/channels/token`,\n    };\n    return defaultFetcher<\n      CreateKakaoChannelTokenRequest,\n      RequestKakaoChannelTokenResponse\n    >(this.authInfo, requestConfig, data);\n  }\n\n  /**\n   * @description 카카오 채널 연동 메소드\n   * getKakaoChannelCategories, requestKakaoChannelToken 메소드를 선행적으로 호출해야 합니다!\n   */\n  async createKakaoChannel(\n    data: CreateKakaoChannelRequest,\n  ): Promise<CreateKakaoChannelResponse> {\n    const requestConfig: RequestConfig = {\n      method: 'POST',\n      url: `${this.baseUrl}/kakao/v2/channels`,\n    };\n    return defaultFetcher<\n      CreateKakaoChannelRequest,\n      CreateKakaoChannelResponse\n    >(this.authInfo, requestConfig, data);\n  }\n\n  /**\n   * @description 카카오 채널 삭제, 채널이 삭제 될 경우 해당 채널의 템플릿이 모두 삭제됩니다!\n   * @param channelId 카카오 채널 ID\n   */\n  async removeKakaoChannel(channelId: string): Promise<KakaoChannel> {\n    const requestConfig: RequestConfig = {\n      method: 'DELETE',\n      url: `${this.baseUrl}/kakao/v2/channels/${channelId}`,\n    };\n    return defaultFetcher<never, KakaoChannel>(this.authInfo, requestConfig);\n  }\n\n  /**\n   * 카카오 템플릿 목록 조회\n   * @param data 카카오 템플릿 목록을 더 자세하게 조회할 때 필요한 파라미터\n   */\n  async getKakaoAlimtalkTemplates(\n    data?: GetKakaoAlimtalkTemplatesRequest,\n  ): Promise<GetKakaoAlimtalkTemplatesFinalizeResponse> {\n    let payload: GetKakaoAlimtalkTemplatesFinalizeRequest = {};\n    if (data) {\n      payload = new GetKakaoAlimtalkTemplatesFinalizeRequest(data);\n    }\n\n    const parameter = qs.stringify(payload, {indices: false});\n    const endpoint = `${this.baseUrl}/kakao/v2/templates?${parameter}`;\n    const requestConfig: RequestConfig = {\n      method: 'GET',\n      url: endpoint,\n    };\n    const response = await defaultFetcher<\n      never,\n      GetKakaoAlimtalkTemplatesResponse\n    >(this.authInfo, requestConfig);\n\n    const templateList = new Array<KakaoAlimtalkTemplate>();\n    for (const template of response.templateList) {\n      templateList.push(new KakaoAlimtalkTemplate(template));\n    }\n\n    return {\n      limit: response.limit,\n      nextKey: response.nextKey,\n      startKey: response.startKey,\n      templateList,\n    };\n  }\n\n  /**\n   * 카카오 템플릿 상세 조회\n   * @param templateId 카카오 알림톡 템플릿 ID\n   */\n  async getKakaoAlimtalkTemplate(\n    templateId: string,\n  ): Promise<KakaoAlimtalkTemplate> {\n    const requestConfig: RequestConfig = {\n      method: 'GET',\n      url: `${this.baseUrl}/kakao/v2/templates/${templateId}`,\n    };\n    const response = await defaultFetcher<never, GetKakaoTemplateResponse>(\n      this.authInfo,\n      requestConfig,\n    );\n    return new KakaoAlimtalkTemplate(response);\n  }\n\n  /**\n   * 카카오 템플릿 카테고리 조회\n   */\n  async getKakaoAlimtalkTemplateCategories(): Promise<\n    Array<KakaoAlimtalkTemplateCategory>\n  > {\n    const requestConfig: RequestConfig = {\n      method: 'GET',\n      url: `${this.baseUrl}/kakao/v2/templates/categories`,\n    };\n    return defaultFetcher<never, Array<KakaoAlimtalkTemplateCategory>>(\n      this.authInfo,\n      requestConfig,\n    );\n  }\n\n  /**\n   * @description 카카오 알림톡 템플릿 생성\n   * 반드시 getKakaoAlimtalkTemplateCategories를 먼저 호출하여 카테고리 값을 확인해야 합니다!\n   * @param data 알림톡 템플릿 생성을 위한 파라미터\n   */\n  async createKakaoAlimtalkTemplate(\n    data: CreateKakaoAlimtalkTemplateRequest,\n  ): Promise<KakaoAlimtalkTemplate> {\n    const requestConfig: RequestConfig = {\n      method: 'POST',\n      url: `${this.baseUrl}/kakao/v2/templates`,\n    };\n\n    const response = await defaultFetcher<\n      CreateKakaoAlimtalkTemplateRequest,\n      KakaoAlimtalkTemplateInterface\n    >(this.authInfo, requestConfig, data);\n\n    return new KakaoAlimtalkTemplate(response);\n  }\n\n  /**\n   * 카카오 알림톡 템플릿 검수 요청\n   * @param templateId 카카오 알림톡 템플릿 ID\n   */\n  async requestInspectionKakaoAlimtalkTemplate(\n    templateId: string,\n  ): Promise<KakaoAlimtalkTemplate> {\n    const requestConfig: RequestConfig = {\n      method: 'PUT',\n      url: `${this.baseUrl}/kakao/v2/templates/${templateId}/inspection`,\n    };\n    const response = await defaultFetcher<\n      never,\n      KakaoAlimtalkTemplateInterface\n    >(this.authInfo, requestConfig);\n\n    return new KakaoAlimtalkTemplate(response);\n  }\n\n  /**\n   * 카카오 알림톡 템플릿 검수 취소 요청\n   * @param templateId 카카오 알림톡 템플릿 ID\n   */\n  async cancelInspectionKakaoAlimtalkTemplate(\n    templateId: string,\n  ): Promise<KakaoAlimtalkTemplate> {\n    const requestConfig: RequestConfig = {\n      method: 'PUT',\n      url: `${this.baseUrl}/kakao/v2/templates/${templateId}/inspection/cancel`,\n    };\n    const response = await defaultFetcher<\n      never,\n      KakaoAlimtalkTemplateInterface\n    >(this.authInfo, requestConfig);\n\n    return new KakaoAlimtalkTemplate(response);\n  }\n\n  /**\n   * 카카오 알림톡 템플릿 수정(검수 X)\n   * @param templateId 카카오 알림톡 템플릿 ID\n   * @param data 카카오 알림톡 템플릿 수정을 위한 파라미터\n   */\n  async updateKakaoAlimtalkTemplate(\n    templateId: string,\n    data: UpdateKakaoAlimtalkTemplateRequest,\n  ): Promise<KakaoAlimtalkTemplate> {\n    const requestConfig: RequestConfig = {\n      method: 'PUT',\n      url: `${this.baseUrl}/kakao/v2/templates/${templateId}`,\n    };\n    const response = await defaultFetcher<\n      UpdateKakaoAlimtalkTemplateRequest,\n      KakaoAlimtalkTemplateInterface\n    >(this.authInfo, requestConfig, data);\n\n    return new KakaoAlimtalkTemplate(response);\n  }\n\n  /**\n   * 카카오 알림톡 템플릿 이름 수정(검수 상태 상관없이 변경가능)\n   * @param templateId 카카오 알림톡 템플릿 ID\n   * @param name 카카오 알림톡 템플릿 이름 변경을 위한 파라미터\n   */\n  async updateKakaoAlimtalkTemplateName(\n    templateId: string,\n    name: string,\n  ): Promise<KakaoAlimtalkTemplate> {\n    const requestConfig: RequestConfig = {\n      method: 'PUT',\n      url: `${this.baseUrl}/kakao/v2/templates/${templateId}/name`,\n    };\n    const response = await defaultFetcher<\n      {\n        name: string;\n      },\n      KakaoAlimtalkTemplateInterface\n    >(this.authInfo, requestConfig, {name});\n\n    return new KakaoAlimtalkTemplate(response);\n  }\n\n  /**\n   * @deprecated 해당 메소드는 더이상 사용되지 않습니다. removeKakaoAlimtalkTemplate를 이용해주세요!\n   * 카카오 알림톡 템플릿 삭제(대기, 반려 상태일 때만 삭제가능)\n   * @param templateId 카카오 알림톡 템플릿 ID\n   */\n  async deleteKakaoAlimtalkTemplate(\n    templateId: string,\n  ): Promise<KakaoAlimtalkTemplate> {\n    return this.removeKakaoAlimtalkTemplate(templateId);\n  }\n\n  /**\n   * 카카오 알림톡 템플릿 삭제(대기, 반려 상태일 때만 삭제가능)\n   * @param templateId 카카오 알림톡 템플릿 ID\n   */\n  async removeKakaoAlimtalkTemplate(\n    templateId: string,\n  ): Promise<KakaoAlimtalkTemplate> {\n    const requestConfig: RequestConfig = {\n      method: 'DELETE',\n      url: `${this.baseUrl}/kakao/v2/templates/${templateId}`,\n    };\n    const response = await defaultFetcher<\n      never,\n      KakaoAlimtalkTemplateInterface\n    >(this.authInfo, requestConfig);\n\n    return new KakaoAlimtalkTemplate(response);\n  }\n\n  /**\n   * 080 수신 거부 조회\n   * @param data 080 수신 거부 상세 조회용 request 데이터\n   * @returns GetBlacksResponse\n   */\n  async getBlacks(data?: GetBlacksRequest): Promise<GetBlacksResponse> {\n    let payload: GetBlacksFinalizeRequest = {type: 'DENIAL'};\n    if (data) {\n      payload = new GetBlacksFinalizeRequest(data);\n    }\n    const parameter = qs.stringify(payload, {\n      indices: false,\n      addQueryPrefix: true,\n    });\n    const endpoint = `${this.baseUrl}/iam/v1/black${parameter}`;\n    const requestConfig: RequestConfig = {\n      method: 'GET',\n      url: endpoint,\n    };\n    return defaultFetcher<never, GetBlacksResponse>(\n      this.authInfo,\n      requestConfig,\n    );\n  }\n\n  /**\n   * 수신 거부 그룹 조회\n   * @param data 수신 거부 그룹 조회용 request 데이터\n   * @returns GetBlockGroupsResponse\n   */\n  async getBlockGroups(\n    data?: GetBlockGroupsRequest,\n  ): Promise<GetBlockGroupsResponse> {\n    let payload: GetBlockGroupsFinalizeRequest = {};\n    if (data) {\n      payload = new GetBlockGroupsFinalizeRequest(data);\n    }\n    const parameter = qs.stringify(payload, {\n      indices: false,\n      addQueryPrefix: true,\n    });\n    const endpoint = `${this.baseUrl}/iam/v1/block/groups${parameter}`;\n    const requestConfig: RequestConfig = {\n      method: 'GET',\n      url: endpoint,\n    };\n    return defaultFetcher<never, GetBlockGroupsResponse>(\n      this.authInfo,\n      requestConfig,\n    );\n  }\n\n  /**\n   * 수신 차단 그룹 별 수신번호 조회\n   * @param data 수신 거부 그룹 별 수신번호 조회용 request 데이터\n   * @returns GetBlockNumbersResponse\n   */\n  async getBlockNumbers(\n    data?: GetBlockNumbersRequest,\n  ): Promise<GetBlockNumbersResponse> {\n    let payload: GetBlockNumbersFinalizeRequest = {};\n    if (data) {\n      payload = new GetBlockNumbersFinalizeRequest(data);\n    }\n    const parameter = qs.stringify(payload, {\n      indices: false,\n      addQueryPrefix: true,\n    });\n    const endpoint = `${this.baseUrl}/iam/v1/block/numbers${parameter}`;\n    const requestConfig: RequestConfig = {\n      method: 'GET',\n      url: endpoint,\n    };\n    return defaultFetcher<never, GetBlockNumbersResponse>(\n      this.authInfo,\n      requestConfig,\n    );\n  }\n}\n","import {KakaoOption} from './kakao/kakaoOption';\nimport {RcsOption} from './rcs/rcsOption';\nimport {FileIds, MessageParameter} from '../requests/messageRequest';\n\n/**\n * @name MessageType 메시지 유형(단문 문자, 장문 문자, 알림톡 등)\n * SMS: 단문 문자\n * LMS: 장문 문자\n * MMS: 사진 문자\n * ATA: 알림톡\n * CTA: 친구톡\n * CTI: 사진 한장이 포함된 친구톡\n * NSA: 네이버 스마트알림(톡톡)\n * RCS_SMS: RCS 단문 문자\n * RCS_LMS: RCS 장문 문자\n * RCS_MMS: RCS 사진 문자\n * RCS_TPL: RCS 템플릿\n * RCS_ITPL: RCS 이미지 템플릿\n * RCS_LTPL: RCS LMS 템플릿 문자\n * FAX: 팩스\n * VOICE: 음성문자(TTS)\n */\nexport type MessageType =\n  | 'SMS'\n  | 'LMS'\n  | 'MMS'\n  | 'ATA'\n  | 'CTA'\n  | 'CTI'\n  | 'NSA'\n  | 'RCS_SMS'\n  | 'RCS_LMS'\n  | 'RCS_MMS'\n  | 'RCS_TPL'\n  | 'RCS_ITPL'\n  | 'RCS_LTPL'\n  | 'FAX'\n  | 'VOICE';\n\n/**\n * 메시지 모델, 전체적인 메시지 발송을 위한 파라미터는 이 Message 모델에서 관장함\n */\nexport class Message {\n  /**\n   * 수신번호\n   */\n  to: string | Array<string>;\n\n  /**\n   * 발신번호\n   */\n  from?: string;\n\n  /**\n   * 메시지 내용\n   */\n  text?: string;\n\n  /**\n   * 메시지 생성일자\n   */\n  dateCreated?: string;\n\n  /**\n   * 메시지 수정일자\n   */\n  dateUpdated?: string;\n\n  /**\n   * 메시지의 그룹 ID\n   */\n  groupId?: string;\n\n  /**\n   * 해당 메시지의 ID\n   */\n  messageId?: string;\n\n  /**\n   * MMS 전용 스토리지(이미지) ID\n   */\n  imageId?: string;\n\n  /**\n   * @name MessageType 메시지 유형\n   */\n  type?: MessageType;\n\n  /**\n   * 문자 제목(LMS, MMS 전용)\n   */\n  subject?: string;\n\n  /**\n   * 메시지 타입 감지 여부(비활성화 시 반드시 타입이 명시 되어야 함)\n   */\n  autoTypeDetect?: boolean;\n\n  /**\n   * 카카오 알림톡/친구톡을 위한 프로퍼티\n   */\n  kakaoOptions?: KakaoOption;\n\n  /**\n   * RCS 메시지를 위한 프로퍼티\n   */\n  rcsOptions?: RcsOption;\n\n  /**\n   * 해외 문자 발송을 위한 국가번호(예) \"82\", \"1\" 등)\n   */\n  country?: string;\n\n  /**\n   * 메시지 로그\n   */\n  log?: Array<object>;\n  replacements?: Array<object>;\n\n  /**\n   * 메시지 상태 코드\n   * @see https://developers.solapi.com/references/message-status-codes\n   */\n  statusCode?: string;\n\n  /**\n   * 사용자를 위한 사용자만의 커스텀 값을 입력할 수 있는 필드\n   * 단, 오브젝트 내 키 값 모두 문자열 형태로 입력되어야 합니다.\n   */\n  customFields?: Record<string, string>;\n\n  faxOptions?: FileIds;\n\n  constructor(parameter: MessageParameter) {\n    this.to = parameter.to;\n    this.from = parameter.from;\n    this.text = parameter.text;\n    this.imageId = parameter.imageId;\n    this.type = parameter.type;\n    this.subject = parameter.subject;\n    this.autoTypeDetect = parameter.autoTypeDetect;\n    this.country = parameter.country;\n    if (parameter.kakaoOptions != undefined) {\n      this.kakaoOptions = new KakaoOption(parameter.kakaoOptions);\n    }\n    if (parameter.rcsOptions != undefined) {\n      this.rcsOptions = new RcsOption(parameter.rcsOptions);\n    }\n    this.customFields = parameter.customFields;\n    this.replacements = parameter.replacements;\n    this.faxOptions = parameter.faxOptions;\n  }\n}\n","import {KakaoButton} from './kakaoButton';\nimport {kakaoOptionRequest} from '../../requests/kakao/kakaoOptionRequest';\n\nexport class KakaoOption {\n  pfId: string;\n  templateId?: string;\n  variables?: Record<string, string>;\n  disableSms?: boolean;\n  adFlag?: boolean;\n  buttons?: Array<KakaoButton>;\n  imageId?: string;\n\n  constructor(parameter: kakaoOptionRequest) {\n    this.pfId = parameter.pfId;\n    this.templateId = parameter.templateId;\n    this.variables = parameter.variables;\n    this.disableSms = parameter.disableSms;\n    this.adFlag = parameter.adFlag;\n    this.buttons = parameter.buttons;\n    this.imageId = parameter.imageId;\n  }\n}\n","import {RcsButton} from './rcsButton';\n\n/**\n * RCS 사진문자 발송 시 필요한 오브젝트\n */\nexport type AdditionalBody = {\n  /**\n   * 슬라이드 제목\n   */\n  title: string;\n  /**\n   * 슬라이드 설명\n   */\n  description: string;\n  /**\n   * MMS 발송 시 사용되는 이미지의 고유 아이디. 이미지 타입이 MMS일 경우에만 사용 가능합니다.\n   * @see https://console.solapi.com/storage\n   * @see https://developers.solapi.com/references/storage\n   */\n  imaggeId?: string;\n  /**\n   * \t슬라이드에 추가되는 버튼 목록, 최대 2개\n   */\n  buttons?: Array<RcsButton>;\n};\n\n/**\n * RCS 발송을 위한 파라미터 타입\n */\nexport type RcsOptionRequest = {\n  /**\n   * RCS 채널의 브랜드 ID\n   */\n  brandId: string;\n  /**\n   * RCS 템플릿 ID\n   */\n  templateId?: string;\n  /**\n   * 문자 복사 가능 여부\n   */\n  copyAllowed?: boolean;\n  /**\n   * RCS 템플릿 대체 문구 입력 오브젝트\n   * 예) { #{치환문구1} : \"치환문구 값\" }\n   */\n  variables?: Record<string, string>;\n  /**\n   * 사진 문자 타입. 타입: \"M3\", \"S3\", \"M4\", \"S4\", \"M5\", \"S5\", \"M6\", \"S6\" (M: 중간 사이즈. S: 작은 사이즈. 숫자: 사진 개수)\n   */\n  mmsType?: 'M3' | 'S3' | 'M4' | 'S4' | 'M5' | 'S5' | 'M6' | 'S6';\n  /**\n   * 광고 문자 여부\n   */\n  commercialType?: boolean;\n  /**\n   * 대체발송여부. false 로 설정했을 경우 해당건이 발송에 실패하게 됐을 때 문자로(SMS, LMS, MMS)로 대체 발송됩니다. 대체 발송이 될 경우 기존 가격은 환불되고 각 문자 타입에 맞는 금액이 차감됩니다. 기본값: false\n   */\n  disableSms?: boolean;\n  /**\n   * RCS 사진 문자 전송 시 필요한 오브젝트\n   */\n  additionalBody?: AdditionalBody;\n  /**\n   * RCS 템플릿 버튼 배열\n   */\n  buttons?: Array<RcsButton>;\n};\n\nexport class RcsOption {\n  brandId: string;\n  templateId?: string;\n  copyAllowed?: boolean;\n  variables?: Record<string, string>;\n  mmsType?: 'M3' | 'S3' | 'M4' | 'S4' | 'M5' | 'S5' | 'M6' | 'S6'; // (M: 중간 사이즈. S: 작은 사이즈. 숫자: 사진 개수)\n  commercialType?: boolean;\n  disableSms?: boolean;\n  additionalBody?: AdditionalBody;\n  buttons?: Array<RcsButton>;\n\n  constructor(parameter: RcsOptionRequest) {\n    this.brandId = parameter.brandId;\n    this.templateId = parameter.templateId;\n    this.copyAllowed = parameter.copyAllowed;\n    this.mmsType = parameter.mmsType;\n    this.commercialType = parameter.commercialType;\n    this.variables = parameter.variables;\n    this.disableSms = parameter.disableSms;\n    this.additionalBody = parameter.additionalBody;\n    this.buttons = parameter.buttons;\n  }\n}\n","import {Message, MessageType} from '../models/message';\nimport {DateOperatorType} from '../types/commonTypes';\nimport {formatWithTransfer} from '../lib/stringDateTrasnfer';\nimport {kakaoOptionRequest} from './kakao/kakaoOptionRequest';\nimport {RcsOptionRequest} from '../models/rcs/rcsOption';\n\nexport type DefaultAgentType = {\n  sdkVersion: string;\n  osPlatform: string;\n  appId?: string;\n};\n\n// NOTE: Need to update when publish library.\nconst sdkVersion = 'nodejs/5.4.0';\n\nexport const defaultAgent: DefaultAgentType = {\n  sdkVersion,\n  osPlatform: `${process.platform} | ${process.version}`,\n};\n\nabstract class DefaultMessageRequest {\n  allowDuplicates: boolean;\n  protected agent: DefaultAgentType;\n\n  protected constructor() {\n    this.agent = defaultAgent;\n    this.allowDuplicates = false;\n  }\n}\n\nexport type MessageParameter = {\n  to: string | Array<string>;\n  from?: string;\n  text?: string;\n  imageId?: string;\n  type?: MessageType;\n  subject?: string;\n  autoTypeDetect?: boolean;\n  kakaoOptions?: kakaoOptionRequest;\n  rcsOptions?: RcsOptionRequest;\n  country?: string;\n  customFields?: Record<string, string>;\n  replacements?: Array<object>;\n  faxOptions?: FileIds;\n};\n\nexport class SingleMessageSendingRequest extends DefaultMessageRequest {\n  message: Message;\n\n  constructor(message: Message, allowDuplicates?: boolean, appId?: string) {\n    super();\n    this.message = message;\n    if (typeof allowDuplicates === 'boolean') {\n      this.allowDuplicates = allowDuplicates;\n    }\n    if (appId) {\n      this.agent.appId = appId;\n    }\n  }\n}\n\nexport class MultipleMessageSendingRequest extends DefaultMessageRequest {\n  messages: Array<Message>;\n\n  constructor(\n    messages: Array<Message>,\n    allowDuplicates?: boolean,\n    appId?: string,\n  ) {\n    super();\n    this.messages = messages;\n    if (typeof allowDuplicates === 'boolean') {\n      this.allowDuplicates = allowDuplicates;\n    }\n    if (appId) {\n      this.agent.appId = appId;\n    }\n  }\n}\n\nexport class MultipleDetailMessageSendingRequest extends DefaultMessageRequest {\n  messages: Array<Message>;\n  scheduledDate: string;\n  showMessageList: boolean;\n\n  constructor(\n    messages: Array<Message>,\n    allowDuplicates?: boolean,\n    appId?: string,\n    scheduledDate?: string | Date,\n    showMessageList?: boolean,\n  ) {\n    super();\n    this.messages = messages;\n    if (allowDuplicates) {\n      this.allowDuplicates = allowDuplicates;\n    }\n    if (appId) {\n      this.agent.appId = appId;\n    }\n    if (scheduledDate) {\n      this.scheduledDate = formatWithTransfer(scheduledDate);\n    }\n    if (showMessageList) {\n      this.showMessageList = showMessageList;\n    }\n  }\n}\n\nexport class GroupMessageAddRequest {\n  messages: Array<Message>;\n\n  constructor(messages: Array<Message>) {\n    this.messages = messages;\n  }\n}\n\nexport type ScheduledDateSendingRequest = {\n  scheduledDate: string;\n};\n\nexport type RemoveMessageIdsToGroupRequest = {\n  messageIds: Array<string>;\n};\n\nexport type GetGroupMessagesRequest = {\n  startKey?: string;\n  limit?: number;\n};\n\nexport type RequestConfig = {\n  method: string;\n  url: string;\n};\n\nexport type FileIds = {\n  fileIds: Array<string>;\n};\n\nexport type FileType = 'KAKAO' | 'MMS' | 'DOCUMENT' | 'RCS' | 'FAX';\n\nexport type FileUploadRequest = {\n  file: string;\n  type: FileType;\n  name?: string;\n  link?: string;\n};\n\nexport type CreateGroupRequest = DefaultAgentType & {\n  allowDuplicates: boolean;\n  appId?: string;\n  customFields?: Record<string, string>;\n};\n\n/**\n * @description GET API 중 일부 파라미터 조회 시 필요한 객체\n * @see https://docs.solapi.com/api-reference/overview#operator\n */\nexport type DatePayloadType = {\n  [key in DateOperatorType]?: string | Date;\n};\n\nexport type CreateKakaoChannelTokenRequest = {\n  searchId: string;\n  phoneNumber: string;\n};\n\nexport type CreateKakaoChannelRequest = {\n  searchId: string;\n  phoneNumber: string;\n  categoryCode: string;\n  token: string;\n};\n","import {formatISO, parseISO} from 'date-fns';\nimport {InvalidDateError} from '../errors/defaultError';\n\n/**\n * @name formatWithTransfer stringDateTransfer와 formatISO를 한번에 실행하는 함수\n * @param value Date 타입의 날짜\n * @throws InvalidDateError\n */\nexport function formatWithTransfer(value: string | Date): string {\n  return formatISO(stringDateTransfer(value));\n}\n\n/**\n * 일반 문자열 날짜가 있을 경우 Date 타입으로 변환해주는 함수\n * @param value 일반 문자열 날짜 또는 Date 타입의 날짜\n * @throws InvalidDateError\n */\nexport default function stringDateTransfer(value: string | Date): Date {\n  if (typeof value === 'string') {\n    value = parseISO(value);\n    const invalidDateText = 'Invalid Date';\n    if (value.toString() === invalidDateText) {\n      throw new InvalidDateError(invalidDateText);\n    }\n  }\n  return value;\n}\n","import {FailedMessage} from '../responses/sendManyDetailResponse';\n\nexport type ErrorResponse = {\n  errorCode: string;\n  errorMessage: string;\n};\n\nexport class InvalidDateError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidDateError';\n  }\n}\n\nexport class ApiKeyError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidApiKeyError';\n  }\n}\n\nexport class DefaultError extends Error {\n  constructor(errorCode: string, errorMessage: string) {\n    super(errorMessage);\n    this.name = errorCode;\n  }\n}\n\n/**\n * @description 메시지가 모두 발송 접수가 불가한 상태일 경우 MessageNotReceivedError 에러가 발생합니다.\n */\nexport class MessageNotReceivedError extends Error {\n  failedMessageList: Array<FailedMessage>;\n\n  constructor(errorList: Array<FailedMessage>) {\n    const statusMessageCount = errorList.length;\n    super(\n      `${statusMessageCount}개의 메시지가 접수되지 못했습니다. 자세한 에러 메시지는 해당 에러 내 failedMessageList를 확인해주세요.`,\n    );\n    this.name = 'MessagesNotReceivedError';\n    this.failedMessageList = errorList;\n  }\n}\n\nexport class BadRequestError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'BadRequestError';\n  }\n}\n","import getAuthInfo, {AuthenticationParameter} from './authenticator';\nimport {DefaultError, ErrorResponse} from '../errors/defaultError';\n\ntype DefaultRequest = {\n  url: string;\n  method: string;\n};\n\n/**\n * 공용 API 클라이언트 함수\n * @throws DefaultError 발송 실패 등 API 상의 다양한 오류를 표시합니다.\n * @param authParameter API 인증을 위한 파라미터\n * @param request API URI, HTTP method 정의\n * @param data API에 요청할 request body 데이터\n */\nexport default async function defaultFetcher<T, R>(\n  authParameter: AuthenticationParameter,\n  request: DefaultRequest,\n  data?: T,\n): Promise<R> {\n  const authorizationHeaderData = getAuthInfo(authParameter);\n  return await fetch(request.url, {\n    headers: {\n      Authorization: authorizationHeaderData,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n    method: request.method,\n  }).then<R>(async res => {\n    if (res.status >= 400 && res.status < 500) {\n      const errorResponse: ErrorResponse = await res.json();\n      throw new DefaultError(\n        errorResponse.errorCode,\n        errorResponse.errorMessage,\n      );\n    } else if (res.status >= 500) {\n      const responseText = await res.text();\n      throw new DefaultError('UnknownError', responseText);\n    }\n    try {\n      return res.json();\n    } catch (exception) {\n      console.error(exception);\n      throw new Error(await res.text());\n    }\n  });\n}\n","import {formatISO} from 'date-fns';\nimport {createHmac, randomBytes} from 'node:crypto';\nimport {ApiKeyError} from '../errors/defaultError';\n\nenum AuthenticateType {\n  API_KEY,\n}\n\nexport type AuthenticationParameter = {\n  apiKey?: string;\n  apiSecret?: string;\n};\n\n/**\n * 특정 사이즈의 텍스트를 생성합니다.\n * @param alphabet 지정할 알파벳/숫자 문자열\n * @param size 지정할 문자 길이\n */\nfunction genCustomText(alphabet: string, size: number): string {\n  const bytes = randomBytes(size);\n  let genRandomText = '';\n  for (let i = 0; i < size; i++) {\n    genRandomText += alphabet[bytes[i] % alphabet.length];\n  }\n  return genRandomText;\n}\n\n/**\n * Get Authenticate Information for SOLAPI Requests\n * @param authenticationParameter\n * @param authType\n * @return string Authorization value\n */\nexport default function getAuthInfo(\n  authenticationParameter: AuthenticationParameter,\n  authType: AuthenticateType = AuthenticateType.API_KEY,\n): string {\n  const {apiKey, apiSecret} = authenticationParameter;\n  switch (authType) {\n    case AuthenticateType.API_KEY:\n    default:\n      const salt = genCustomText(\n        '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\n        32,\n      );\n      const date = formatISO(new Date());\n      const hmacData = date + salt;\n      if (!apiKey || !apiSecret || apiKey === '' || apiSecret === '') {\n        throw new ApiKeyError('Invalid API Key Error');\n      }\n      const genHmac = createHmac('sha256', apiSecret);\n      genHmac.update(hmacData);\n      const signature = genHmac.digest('hex');\n      return `HMAC-SHA256 apiKey=${apiKey}, date=${date}, salt=${salt}, signature=${signature}`;\n  }\n}\n","import stringDateTransfer from '../../lib/stringDateTrasnfer';\n\n/**\n * @description 카카오 채널 카테고리 타입\n * @property code 카테고리 코드번호\n * @property name 카테고리 설명(이름)\n */\nexport type KakaoChannelCategory = {\n  code: string;\n  name: string;\n};\n\nexport interface KakaoChannelInterface {\n  channelId: string;\n  searchId: string;\n  accountId: string;\n  phoneNumber: string;\n  sharedAccountIds: Array<string>;\n  dateCreated?: string | Date;\n  dateUpdated?: string | Date;\n}\n\n/**\n * @description 카카오 채널\n * @property channelId 카카오 채널 고유 ID, SOLAPI 내부 식별용\n * @property searchId 카카오 채널 검색용 아이디, 채널명이 아님\n * @property accountId 계정 고유번호\n * @property phoneNumber 카카오 채널 담당자 휴대전화 번호\n * @property sharedAccountIds 카카오 채널을 공유한 SOLAPI 계정 고유번호 목록\n * @property dateCreated 카카오 채널 생성일자(연동일자)\n * @property dateUpdated 카카오 채널 정보 수정일자\n */\nexport class KakaoChannel implements KakaoChannelInterface {\n  channelId: string;\n  searchId: string;\n  accountId: string;\n  phoneNumber: string;\n  sharedAccountIds: Array<string>;\n  dateCreated?: Date;\n  dateUpdated?: Date;\n\n  constructor(parameter: KakaoChannelInterface) {\n    this.channelId = parameter.channelId;\n    this.searchId = parameter.searchId;\n    this.accountId = parameter.accountId;\n    this.phoneNumber = parameter.phoneNumber;\n    this.sharedAccountIds = parameter.sharedAccountIds;\n    if (parameter.dateCreated != undefined) {\n      this.dateCreated = stringDateTransfer(parameter.dateCreated);\n    }\n    if (parameter.dateUpdated != undefined) {\n      this.dateUpdated = stringDateTransfer(parameter.dateUpdated);\n    }\n  }\n}\n","import {KakaoButton} from './kakaoButton';\nimport stringDateTransfer from '../../lib/stringDateTrasnfer';\nimport {GetKakaoTemplateResponse} from '../../responses/kakao/getKakaoTemplateResponse';\nimport {KakaoChannelCategory} from './kakaoChannel';\nimport {KakaoAlimtalkTemplateQuickReply} from './kakaoAlimtalkTemplateQuickReply';\n\n/**\n * @description 카카오 채널 카테고리 타입\n * @property code 카테고리 코드번호\n * @property name 카테고리 설명(이름)\n */\nexport type KakaoAlimtalkTemplateCategory = KakaoChannelCategory;\n\n/**\n * @description 카카오 알림톡 템플릿 메시지 유형<br>\n * BA:기본형, EX:부가정보형, AD:광고추가형, MI: 복합형\n */\nexport type KakaoAlimtalkTemplateMessageType = 'BA' | 'EX' | 'AD' | 'MI';\n\n/**\n * @description 카카오 알림톡 템플릿 강조 유형<br>\n * NONE: 선택안함, TEXT: 강조표기형, IMAGE: 이미지형, ITEM_LIST: 아이템리스트형\n */\nexport type KakaoAlimtalkTemplateEmphasizeType =\n  | 'NONE'\n  | 'TEXT'\n  | 'IMAGE'\n  | 'ITEM_LIST';\n\n/**\n * @description 카카오 알림톡 템플릿 그룹 유형(기본값은 Channel)\n */\nexport type KakaoAlimtalkTemplateAssignType = 'CHANNEL' | 'GROUP';\n\n/**\n * @description 카카오 알림톡 템플릿 상태<br><br>\n * PENDING - 대기<br><br>\n * INSPECTING - 검수중<br><br>\n * APPROVED - 등록완료(검수완료)<br><br>\n * REJECTED - 반려됨<br><br>\n */\nexport type KakaoAlimtalkTemplateStatus =\n  | 'PENDING'\n  | 'INSPECTING'\n  | 'APPROVED'\n  | 'REJECTED';\n\n/**\n * @description 알림톡 템플릿 댓글 타입\n */\nexport type KakaoAlimtalkTemplateCommentType = {\n  isAdmin: boolean;\n  memberId: string;\n  content: string;\n  dateCreated: string;\n};\n\nexport type KakaoAlimtalkTemplateHighlightType = {\n  title?: string | null;\n  description?: string | null;\n  imageId?: string | null;\n};\n\nexport type KakaoAlimtalkTemplateItemType = {\n  list: Array<{\n    title: string;\n    description: string;\n  }>;\n  summary: {\n    title?: string | null;\n    description?: string | null;\n  };\n};\n\nexport interface KakaoAlimtalkTemplateInterface {\n  /**\n   * @description 템플릿 제목\n   */\n  name: string;\n\n  /**\n   * @description 카카오 비즈니스 채널 ID\n   */\n  channelId?: string | null;\n\n  /**\n   * @description 카카오 비즈니스 채널 그룹 ID\n   */\n  channelGroupId?: string | null;\n\n  /**\n   * @description 알림톡 템플릿 내용\n   */\n  content?: string;\n\n  /**\n   * @description 알림톡 템플릿 숨김 여부\n   */\n  isHidden?: boolean;\n\n  /**\n   * @description 알림톡 템플릿 메시지 유형\n   */\n  messageType: KakaoAlimtalkTemplateMessageType;\n\n  /**\n   * @description 강조 유형\n   */\n  emphasizeType: KakaoAlimtalkTemplateEmphasizeType;\n\n  /**\n   * @description 부가정보. 메시지 유형이 \"부가정보형\"또는 \"복합형\"일 경우 필수\n   */\n  extra?: string | null;\n\n  /**\n   * @description 간단 광고 문구. 메시지 유형이 \"광고추가형\"또는 \"복합형\"일 경우 필수\n   */\n  ad?: string | null;\n\n  /**\n   * @description 강조표기 핵심문구(변수사용가능, emphasizeType이 TEXT일 경우 필수 값). 템플릿 내용에 강조표기할 핵심문구가 동일하게 포함되어 있어야합니다.\n   */\n  emphasizeTitle?: string | null;\n\n  /**\n   * @description 강조표기 보조문구(emphasizeType이 TEXT일 경우 필수 값). 템플릿 내용에 강조표기할 보조문구가 동일하게 포함되어 있어야합니다.\n   */\n  emphasizeSubtitle?: string | null;\n\n  /**\n   * @description PC 노출 여부. OTP, 보안 메시지의 경우 유저선택 무관 PC 미노출\n   */\n  securityFlag: boolean;\n\n  /**\n   * @description 템플릿에 사용되는 이미지 ID\n   */\n  imageId?: string | null;\n\n  /**\n   * @description 카카오 알림톡 템플릿 그룹 유형\n   */\n  assignType?: KakaoAlimtalkTemplateAssignType;\n\n  /**\n   * @description 카카오 알림톡 템플릿 버튼 목록\n   */\n  buttons?: Array<KakaoButton>;\n\n  /**\n   * @description 카카오 알림톡 템플릿 상태 현황목록, commentable이 true일 때만 해당 값이 표시됩니다.\n   */\n  comments?: Array<KakaoAlimtalkTemplateCommentType>;\n\n  /**\n   * @description 의견을 남길 수 있는 템플릿 여부\n   */\n  commentable?: boolean;\n\n  /**\n   * 바로가기 연결(링크) 목록\n   */\n  quickReplies?: Array<KakaoAlimtalkTemplateQuickReply>;\n\n  /**\n   * @description 아이템 리스트 용 헤더\n   */\n  header?: string | null;\n\n  /**\n   * @description 아이템 리스트용 하이라이트 정보 유형\n   */\n  highlight?: KakaoAlimtalkTemplateHighlightType;\n\n  /**\n   * @description 아이템 리스트 유형\n   */\n  item?: KakaoAlimtalkTemplateItemType;\n\n  /**\n   * @description 카카오 알림톡 템플릿 ID\n   */\n  templateId: string;\n\n  /**\n   * @description 긴급 검수를 위한 알림토 딜러사 측 템플릿 코드, commentable이 false일 때만 해당 코드가 표시됩니다.\n   */\n  code?: string;\n\n  /**\n   * @description 카카오 알림톡 템플릿 상태<br><br>\n   * PENDING - 대기<br><br>\n   * INSPECTING - 검수중<br><br>\n   * APPROVED - 등록완료(검수완료)<br><br>\n   * REJECTED - 반려됨<br><br>\n   */\n  status: KakaoAlimtalkTemplateStatus;\n}\n\n/**\n * @description 카카오 알림톡 템플릿 모델<br>\n * 알림톡 템플릿 자체의 정보는 아래 페이지를 참고해보세요!\n * @see https://kakaobusiness.gitbook.io/main/ad/bizmessage/notice-friend/content-guide\n */\nexport class KakaoAlimtalkTemplate implements KakaoAlimtalkTemplateInterface {\n  name: string;\n  channelId?: string | null;\n  channelGroupId?: string | null;\n  content?: string;\n  isHidden?: boolean;\n  messageType: KakaoAlimtalkTemplateMessageType;\n  emphasizeType: KakaoAlimtalkTemplateEmphasizeType;\n  extra?: string | null;\n  ad?: string | null;\n  emphasizeTitle?: string | null;\n  emphasizeSubtitle?: string | null;\n  securityFlag: boolean;\n  imageId?: string | null;\n  assignType?: KakaoAlimtalkTemplateAssignType;\n  buttons?: KakaoButton[];\n  quickReplies?: KakaoAlimtalkTemplateQuickReply[];\n  header?: string | null;\n  highlight?: KakaoAlimtalkTemplateHighlightType;\n  item?: KakaoAlimtalkTemplateItemType;\n  templateId: string;\n  commentable?: boolean;\n  comments?: Array<KakaoAlimtalkTemplateCommentType>;\n  code?: string;\n  status: KakaoAlimtalkTemplateStatus;\n\n  /**\n   * 알림톡 템플릿 생성일자\n   */\n  dateCreated: Date;\n\n  /**\n   * 알림톡 템플릿 수정일자\n   */\n  dateUpdated: Date;\n\n  constructor(\n    parameter: KakaoAlimtalkTemplateInterface | GetKakaoTemplateResponse,\n  ) {\n    this.channelId = parameter.channelId;\n    this.channelGroupId = parameter.channelGroupId;\n    this.name = parameter.name;\n    this.content = parameter.content;\n    this.ad = parameter.ad;\n    this.assignType = parameter.assignType;\n    this.buttons = parameter.buttons;\n    this.templateId = parameter.templateId;\n    this.header = parameter.header;\n    this.item = parameter.item;\n    this.highlight = parameter.highlight;\n    this.securityFlag = parameter.securityFlag;\n    this.isHidden = parameter.isHidden;\n    this.messageType = parameter.messageType;\n    this.emphasizeType = parameter.emphasizeType;\n    this.extra = parameter.extra;\n    this.emphasizeTitle = parameter.emphasizeTitle;\n    this.emphasizeSubtitle = parameter.emphasizeSubtitle;\n    this.imageId = parameter.imageId;\n    this.quickReplies = parameter.quickReplies;\n    this.comments = parameter.comments;\n    this.commentable = parameter.commentable;\n    this.code = parameter.code;\n    this.status = parameter.status;\n\n    if ('dateCreated' in parameter) {\n      this.dateCreated = stringDateTransfer(parameter.dateCreated);\n    }\n    if ('dateUpdated' in parameter) {\n      this.dateUpdated = stringDateTransfer(parameter.dateUpdated);\n    }\n  }\n}\n","import {KakaoAlimtalkTemplateStatus} from '../../models/kakao/kakaoAlimtalkTemplate';\nimport {formatWithTransfer} from '../../lib/stringDateTrasnfer';\nimport {DatePayloadType} from '../messageRequest';\n\ntype GetKakaoAlimtalkTemplatesNameType =\n  | {\n      eq?: string;\n      ne?: string;\n      like?: never;\n    }\n  | {\n      eq?: never;\n      ne?: never;\n      like: string;\n    };\n\n/**\n * @name GetKakaoAlimtalkTemplatesRequest\n * @description 카카오 알림톡 조회를 위한 요청 타입\n */\nexport interface GetKakaoAlimtalkTemplatesRequest {\n  /**\n   * @description 알림톡 템플릿 제목\n   * 주의! like 프로퍼티가 들어가는 경우 eq와 ne는 무시됩니다.\n   */\n  name?: GetKakaoAlimtalkTemplatesNameType | string;\n\n  /**\n   * @description 카카오 비즈니스 채널 ID\n   */\n  channelId?: string;\n\n  /**\n   * @description 카카오 알림톡 템플릿 ID\n   */\n  templateId?: string;\n\n  /**\n   * @description 숨긴 템플릿 여부 확인\n   */\n  isHidden?: boolean;\n\n  /**\n   * @description 알림톡 템플릿 상태\n   */\n  status?: KakaoAlimtalkTemplateStatus;\n\n  /**\n   * @description 페이지네이션 조회 키\n   */\n  startKey?: string;\n\n  /**\n   * @description 조회 시 제한할 건 수 (기본: 20, 최대: 500)\n   */\n  limit?: number;\n\n  /**\n   * @description 조회할 시작 날짜\n   */\n  startDate?: string | Date;\n\n  /**\n   * @description 조회할 종료 날짜\n   */\n  endDate?: string | Date;\n}\n\nexport class GetKakaoAlimtalkTemplatesFinalizeRequest {\n  channelId?: string;\n  isHidden?: boolean;\n  limit?: number;\n  name?: GetKakaoAlimtalkTemplatesNameType | string;\n  startKey?: string;\n  status?: KakaoAlimtalkTemplateStatus;\n  templateId?: string;\n  dateCreated?: DatePayloadType;\n\n  constructor(parameter: GetKakaoAlimtalkTemplatesRequest) {\n    this.channelId = parameter.channelId;\n    this.isHidden = parameter.isHidden;\n    if (parameter.name != undefined) {\n      if (typeof parameter.name == 'string') {\n        this.name = {\n          like: parameter.name,\n        };\n      } else if (typeof parameter.name == 'object') {\n        this.name = parameter.name;\n      }\n    }\n    this.startKey = parameter.startKey;\n    this.status = parameter.status;\n    this.limit = parameter.limit;\n\n    if (parameter.startDate != undefined) {\n      this.dateCreated = Object.assign(this.dateCreated ?? {}, {\n        gte: formatWithTransfer(parameter.startDate),\n      });\n    }\n    if (parameter.endDate != undefined) {\n      this.dateCreated = Object.assign(this.dateCreated ?? {}, {\n        lte: formatWithTransfer(parameter.endDate),\n      });\n    }\n  }\n}\n","import {DatePayloadType} from '../messageRequest';\nimport {formatWithTransfer} from '../../lib/stringDateTrasnfer';\n\n/**\n * @name GetKakaoChannelsRequest\n * @description 카카오 채널 목록 조회를 위한 요청 타입\n */\nexport interface GetKakaoChannelsRequest {\n  /**\n   * @description 카카오 채널 ID(구 pfId)\n   */\n  channelId?: string;\n\n  /**\n   * @description 카카오 채널 검색용 아이디\n   */\n  searchId?: string;\n\n  /**\n   * @description 카카오 채널 담당자 휴대전화 번호\n   */\n  phoneNumber?: string;\n\n  /**\n   * @description 카카오톡 채널 카테고리 코드\n   */\n  categoryCode?: string;\n\n  /**\n   * @description 페이지네이션 조회 키\n   */\n  startKey?: string;\n\n  /**\n   * @description 조회 시 제한할 건 수 (기본: 20, 최대: 500)\n   */\n  limit?: number;\n\n  /**\n   * @description 공유받은 채널 여부 조회(true일 경우 공유받지 않은 본인 채널만 조회)\n   */\n  isMine?: boolean;\n\n  /**\n   * @description 조회할 시작 날짜\n   */\n  startDate?: string | Date;\n\n  /**\n   * @description 조회할 종료 날짜\n   */\n  endDate?: string | Date;\n}\n\nexport class GetKakaoChannelsFinalizeRequest {\n  channelId?: string;\n  searchId?: string;\n  phoneNumber?: string;\n  categoryCode?: string;\n  startKey?: string;\n  limit?: number;\n  isMine?: boolean;\n  dateCreated?: DatePayloadType;\n\n  constructor(parameter: GetKakaoChannelsRequest) {\n    this.channelId = parameter.channelId;\n    this.searchId = parameter.searchId;\n    this.phoneNumber = parameter.phoneNumber;\n    this.categoryCode = parameter.categoryCode;\n    this.startKey = parameter.startKey;\n    this.limit = parameter.limit;\n    this.isMine = parameter.isMine;\n\n    if (parameter.startDate != undefined) {\n      this.dateCreated = Object.assign(this.dateCreated ?? {}, {\n        gte: formatWithTransfer(parameter.startDate),\n      });\n    }\n    if (parameter.endDate != undefined) {\n      this.dateCreated = Object.assign(this.dateCreated ?? {}, {\n        lte: formatWithTransfer(parameter.endDate),\n      });\n    }\n  }\n}\n","import {formatWithTransfer} from '../../../lib/stringDateTrasnfer';\n\nexport interface GetGroupsRequest {\n  groupId?: string;\n  startKey?: string;\n  limit?: number;\n  startDate?: string | Date;\n  endDate?: string | Date;\n}\n\nexport class GetGroupsFinalizeRequest implements GetGroupsRequest {\n  criteria?: string;\n  cond?: string;\n  value?: string;\n  startKey?: string;\n  limit?: number;\n  startDate?: string;\n  endDate?: string;\n\n  constructor(parameter: GetGroupsRequest) {\n    if (parameter.groupId) {\n      this.criteria = 'groupId';\n      this.cond = 'eq';\n      this.value = parameter.groupId;\n    }\n    this.startKey = parameter.startKey;\n    this.limit = parameter.limit;\n    if (parameter.startDate) {\n      this.startDate = formatWithTransfer(parameter.startDate);\n    }\n    if (parameter.endDate) {\n      this.endDate = formatWithTransfer(parameter.endDate);\n    }\n  }\n}\n","import {formatWithTransfer} from '../../lib/stringDateTrasnfer';\nimport { DatePayloadType } from '../messageRequest';\n\nexport interface GetBlacksRequest {\n  /**\n   * @description 080 수신거부를 요청한 수신번호\n   */\n  senderNumber?: string;\n\n  /**\n   * @description 페이지네이션 조회 키\n  */\n  startKey?: string;\n\n  /**\n   * @description 조회 시 제한할 건 수 (기본: 20, 최대: 500)\n   */\n  limit?: number;\n\n  /**\n * @description 조회할 시작 날짜\n */\n  startDate?: string | Date;\n\n  /**\n   * @description 조회할 종료 날짜\n   */\n  endDate?: string | Date;\n}\n\nexport class GetBlacksFinalizeRequest implements GetBlacksRequest {\n  type = 'DENIAL' as const;\n  senderNumber?: string;\n  startKey?: string;\n  limit?: number;\n  dateCreated?: DatePayloadType;\n\n  constructor(parameter: GetBlacksRequest) {\n    this.type = 'DENIAL';\n    this.senderNumber = parameter.senderNumber;\n    this.startKey = parameter.startKey;\n    this.limit = parameter.limit;\n\n    if (parameter.startDate != undefined) {\n      this.dateCreated = Object.assign(this.dateCreated ?? {}, {\n        gte: formatWithTransfer(parameter.startDate),\n      });\n    }\n    if (parameter.endDate != undefined) {\n      this.dateCreated = Object.assign(this.dateCreated ?? {}, {\n        lte: formatWithTransfer(parameter.endDate),\n      });\n    }\n  }\n}\n","export interface GetBlockGroupsRequest {\n  /**\n   * @description 수신 거부 그룹 핸들키\n   */\n  blockGroupId?: string;\n\n  /**\n   * @description 수신 거부 그룹에 등록된 모든 발신번호 적용 여부.\n   */\n  useAll?: boolean;\n\n  /**\n   * @description 수신 거부 그룹에 등록된 발신번호\n   */\n  senderNumber?: string;\n\n  /**\n   * @description 수신 거부 그룹 이름 (부분 검색 가능)\n   */\n  name?: { like: string } | string;\n\n  /**\n   * @description 수신 거부 그룹 활성화 상태\n   */\n  status?: 'ACTIVE' | 'INACTIVE';\n\n  /**\n   * @description 페이지네이션 조회 키\n   */\n  startKey?: string;\n\n  /**\n   * @description 조회 시 제한할 건 수 (기본: 20, 최대: 500)\n   */\n  limit?: number;\n}\n\nexport class GetBlockGroupsFinalizeRequest implements GetBlockGroupsRequest {\n  blockGroupId?: string;\n  useAll?: boolean;\n  senderNumber?: string;\n  name?: { like: string } | string;\n  status?: 'ACTIVE' | 'INACTIVE';\n  startKey?: string;\n  limit?: number;\n\n  constructor(parameter: GetBlockGroupsRequest) {\n    this.blockGroupId = parameter.blockGroupId;\n    this.useAll = parameter.useAll;\n    this.senderNumber = parameter.senderNumber;\n    if (parameter.name != undefined) {\n      if (typeof parameter.name == 'string') {\n        this.name = {\n          like: parameter.name,\n        };\n      } else {\n        this.name = parameter.name;\n      }\n    }\n    this.status = parameter.status;\n    this.startKey = parameter.startKey;\n    this.limit = parameter.limit;\n  }\n}\n","export interface GetBlockNumbersRequest {\n  /**\n   * @description 수신 차단 그룹 별 수신번호 핸들키\n   */\n  blockNumberId?: string;\n\n  /**\n   * @description 해당 그룹의 발신번호를 차단한 수신번호\n   */\n  phoneNumber?: string;\n\n  /**\n   * @description 수신 차단 그룹 핸들키\n   */\n  blockGroupId?: string;\n\n  /**\n   * @description 수신 차단 그룹 별 수신번호 목록에 대한 메모 (부분 검색 가능)\n   */\n  memo?: { like: string } | string;\n\n  /**\n   * @description 페이지네이션 조회 키\n   */\n  startKey?: string;\n\n  /**\n   * @description 조회 시 제한할 건 수 (기본: 20, 최대: 500)\n   */\n  limit?: number;\n}\n\nexport class GetBlockNumbersFinalizeRequest implements GetBlockNumbersRequest {\n  blockNumberId?: string;\n  phoneNumber?: string;\n  blockGroupId?: string;\n  memo?: { like: string } | string;\n  startKey?: string;\n  limit?: number;\n\n  constructor(parameter: GetBlockNumbersRequest) {\n    this.blockNumberId = parameter.blockNumberId;\n    this.phoneNumber = parameter.phoneNumber;\n    this.blockGroupId = parameter.blockGroupId;\n    if (parameter.memo != undefined) {\n      if (typeof parameter.memo == 'string') {\n        this.memo = {\n          like: parameter.memo,\n        };\n      } else {\n        this.memo = parameter.memo;\n      }\n    }\n    this.startKey = parameter.startKey;\n    this.limit = parameter.limit;\n  }\n}\n","import {GroupId} from '../../types/commonTypes';\nimport {MessageType} from '../../models/message';\nimport {formatWithTransfer} from '../../lib/stringDateTrasnfer';\n\nexport type DateType = 'CREATED' | 'UPDATED';\n\ntype BaseGetMessagesRequest = {\n  startKey?: string;\n  limit?: number;\n  messageId?: string;\n  messageIds?: Array<string>;\n  groupId?: GroupId;\n  to?: string;\n  from?: string;\n  type?: MessageType;\n  statusCode?: string;\n};\n\ntype GetMessagesRequestWithoutDate = BaseGetMessagesRequest & {\n  dateType?: never;\n  startDate?: never;\n  endDate?: never;\n};\n\ntype GetMessagesRequestWithStartDate = BaseGetMessagesRequest & {\n  dateType?: DateType;\n  startDate: string | Date;\n  endDate?: string | Date;\n};\n\ntype GetMessagesRequestWithEndDate = BaseGetMessagesRequest & {\n  dateType?: DateType;\n  startDate?: string | Date;\n  endDate: string | Date;\n};\n\nexport type GetMessagesRequest =\n  | GetMessagesRequestWithoutDate\n  | GetMessagesRequestWithStartDate\n  | GetMessagesRequestWithEndDate;\n\nexport class GetMessagesFinalizeRequest {\n  startKey?: string;\n  limit?: number;\n  dateType?: DateType = 'CREATED';\n  messageId?: string;\n  messageIds?: Array<string>;\n  groupId?: GroupId;\n  to?: string;\n  from?: string;\n  type?: MessageType;\n  statusCode?: string;\n  startDate?: string;\n  endDate?: string;\n\n  constructor(parameter: GetMessagesRequest) {\n    this.startKey = parameter.startKey;\n    this.limit = parameter.limit;\n    if (parameter.dateType) {\n      this.dateType = parameter.dateType;\n    }\n    if (parameter.startDate) {\n      this.startDate = formatWithTransfer(parameter.startDate);\n    }\n    if (parameter.endDate) {\n      this.endDate = formatWithTransfer(parameter.endDate);\n    }\n    this.messageId = parameter.messageId;\n    this.messageIds = parameter.messageIds;\n    this.groupId = parameter.groupId;\n    this.to = parameter.to;\n    this.from = parameter.from;\n    this.type = parameter.type;\n    this.statusCode = parameter.statusCode;\n  }\n}\n","import {formatWithTransfer} from '../../../lib/stringDateTrasnfer';\n\nexport type GetStatisticsRequest = {\n  masterAccountId?: string;\n  startDate?: string | Date;\n  endDate?: string | Date;\n};\n\nexport class GetStatisticsFinalizeRequest {\n  startDate?: string;\n  endDate?: string;\n  masterAccountId?: string;\n\n  constructor(parameter: GetStatisticsRequest) {\n    if (parameter.startDate) {\n      this.startDate = formatWithTransfer(parameter.startDate);\n    }\n    if (parameter.endDate) {\n      this.endDate = formatWithTransfer(parameter.endDate);\n    }\n    this.masterAccountId = parameter.masterAccountId;\n  }\n}\n"],"names":["formatISO","$7WnbQ$formatISO","parseISO","$7WnbQ$parseISO","$7WnbQ$imagetobase64","$7WnbQ$qs","randomBytes","$7WnbQ$randomBytes","createHmac","$7WnbQ$createHmac","$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$7c1c443a022e843e$export$bccc93b4c0d31aea","constructor","parameter","pfId","templateId","variables","disableSms","adFlag","buttons","imageId","$2b6f659bec894763$export$c8e87b3eb2224744","brandId","copyAllowed","mmsType","commercialType","additionalBody","$27af694b436994e7$export$f69c19e57285b83a","to","from","text","type","subject","autoTypeDetect","country","undefined","kakaoOptions","rcsOptions","customFields","replacements","faxOptions","AuthenticateType","$d52a8906032dc4a4$exports","$d52a8906032dc4a4$export$7522646e65a7a5d1","$d52a8906032dc4a4$export$6efc4418efdbd5bb","$d52a8906032dc4a4$export$c73ca302efeda3b4","$d52a8906032dc4a4$export$b75729dbe9bbac3a","$d52a8906032dc4a4$export$6bfa95453d427b2b","Error","message","name","errorCode","errorMessage","errorList","length","failedMessageList","$66c26f4d178df746$export$5dab325bd79b963d","value","$66c26f4d178df746$export$2e2bcd8739ae039","invalidDateText","toString","$5a82f42370a799c2$export$fb47e5c0b633ea53","sdkVersion","osPlatform","process","platform","version","$5a82f42370a799c2$var$DefaultMessageRequest","agent","allowDuplicates","$5a82f42370a799c2$export$ad3dca884a810e33","appId","$5a82f42370a799c2$export$c4f11270a1f4daf1","messages","scheduledDate","showMessageList","$5a82f42370a799c2$export$6ba9c27a351bdec2","$1abac90f3d49bca7$var$AuthenticateType","$8e16545f15d59ac0$export$2e2bcd8739ae039","authParameter","request","data","authorizationHeaderData","authenticationParameter","authType","apiKey","apiSecret","salt","$1abac90f3d49bca7$var$genCustomText","alphabet","size","bytes","genRandomText","i","date","Date","genHmac","update","signature","digest","fetch","url","headers","Authorization","body","JSON","stringify","method","then","res","status","errorResponse","json","exception","console","error","$35853283150d7335$export$4ec3af33017d2d92","channelId","searchId","accountId","phoneNumber","sharedAccountIds","dateCreated","dateUpdated","$7484651a5b4bc2a1$export$16a18a4d633c3913","channelGroupId","content","ad","assignType","header","item","highlight","securityFlag","isHidden","messageType","emphasizeType","extra","emphasizeTitle","emphasizeSubtitle","quickReplies","comments","commentable","code","$34cc2bc2228ab247$export$91fde5f4988e5a2","like","startKey","limit","startDate","assign","gte","endDate","lte","$a9079e4564020ba4$export$28223677cbfc90e7","categoryCode","isMine","$40788678671ec46e$export$7d6fa05e85a55793","groupId","criteria","cond","$f227b10eb7f29df4$export$a03fd6f891b485aa","senderNumber","$8116b601679486db$export$e63e46a11fc5d3c","blockGroupId","useAll","$a230e645f76924d3$export$df706d57151d1b78","blockNumberId","memo","$f311dcba24d92cc0$export$18a889443adf01a3","dateType","messageId","messageIds","statusCode","$314d4b5bf783a3ae$export$bc0a97822f19395c","masterAccountId","$9377f5ff7761f7c6$export$34e7265c65c60ffd","baseUrl","authInfo","send","requestConfigParameter","payload","Array","isArray","forEach","push","requestConfig","count","groupInfo","total","registeredFailed","sendOne","sendOneFuture","createGroup","addMessagesToGroup","reserveGroup","sendGroup","formattedScheduledDate","getGroup","getGroups","indices","addQueryPrefix","endpoint","getGroupMessages","removeGroupMessages","removeReservationToGroup","removeGroup","getMessages","getStatistics","getBalance","response","balance","point","uploadFile","filePath","fileType","link","encodedFile","file","getKakaoChannelCategories","getKakaoChannels","channelList","channel","nextKey","getKakaoChannel","requestKakaoChannelToken","createKakaoChannel","removeKakaoChannel","getKakaoAlimtalkTemplates","templateList","template","getKakaoAlimtalkTemplate","getKakaoAlimtalkTemplateCategories","createKakaoAlimtalkTemplate","requestInspectionKakaoAlimtalkTemplate","cancelInspectionKakaoAlimtalkTemplate","updateKakaoAlimtalkTemplate","updateKakaoAlimtalkTemplateName","deleteKakaoAlimtalkTemplate","removeKakaoAlimtalkTemplate","getBlacks","getBlockGroups","getBlockNumbers","SolapiMessageService","InvalidDateError","ApiKeyError","DefaultError","MessageNotReceivedError","BadRequestError"],"version":3,"file":"index.mjs.map","sourceRoot":"../"}